PROJECT(common)
MESSAGE("Begin to build ${PROJECT_NAME}")
MESSAGE(STATUS "PROJECT_BINARY_DIR - ${PROJECT_BINARY_DIR}")
MESSAGE(STATUS "PROJECT_SOURCE_DIR - ${PROJECT_SOURCE_DIR}")

INCLUDE_DIRECTORIES(${PROJECT_SOURCE_DIR}/..)

FILE(GLOB_RECURSE ALL_SRC *.cpp)
FOREACH (F ${ALL_SRC})
    SET(SRC_LIST ${SRC_LIST} ${F})
    MESSAGE("Use " ${F})
ENDFOREACH (F)

ADD_LIBRARY(common SHARED ${ALL_SRC})
ADD_LIBRARY(common_static STATIC ${ALL_SRC})

SET_TARGET_PROPERTIES(common_static PROPERTIES OUTPUT_NAME "common")
GET_TARGET_PROPERTY(OUTPUT_VALUE common_static OUTPUT_NAME)

# 编译静态库时，自动会把同名的动态库给删除，因此需要临时设置一下
SET_TARGET_PROPERTIES(common PROPERTIES CLEAN_DIRECT_OUTPUT 1)
SET_TARGET_PROPERTIES(common_static PROPERTIES CLEAN_DIRECT_OUTPUT 1)

SET(MAJOR_VER 1)
SET(MINOR_VER 0)
SET(PATCH_VER 0)
SET(OTHER_VER 1)
ADD_DEFINITIONS(-DMAJOR_VER=${MAJOR_VER} -DMINOR_VER=${MINOR_VER} -DPATCH_VER=${PATCH_VER} -DOTHER_VER=${OTHER_VER})

SET_TARGET_PROPERTIES(common PROPERTIES VERSION ${MAJOR_VER}.${MINOR_VER}.${PATCH_VER} SOVERSION ${MAJOR_VER})

SET(LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/../../lib)

INSTALL(TARGETS common common_static
        LIBRARY DESTINATION lib
        ARCHIVE DESTINATION lib)

FILE(GLOB_RECURSE ALL_HEADER *.h)
FOREACH (F ${ALL_HEADER})
    file(RELATIVE_PATH RELATIVE_PATH_HEADER ${PROJECT_SOURCE_DIR} ${F}) # 获取相对路径
    get_filename_component(HEADER_DIR ${RELATIVE_PATH_HEADER} DIRECTORY)
    MESSAGE("Install " ${RELATIVE_PATH_HEADER} " to " ${CMAKE_INSTALL_PREFIX} "/" ${PROJECT_NAME} "/include/" ${HEADER_DIR})
    INSTALL(FILES ${RELATIVE_PATH_HEADER} DESTINATION include/${HEADER_DIR})
ENDFOREACH (F)