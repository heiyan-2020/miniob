#line 1 "flex_lexer.cpp"

#line 3 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define hsql__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer hsql__create_buffer
#endif

#ifdef yy_delete_buffer
#define hsql__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer hsql__delete_buffer
#endif

#ifdef yy_scan_buffer
#define hsql__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer hsql__scan_buffer
#endif

#ifdef yy_scan_string
#define hsql__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string hsql__scan_string
#endif

#ifdef yy_scan_bytes
#define hsql__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes hsql__scan_bytes
#endif

#ifdef yy_init_buffer
#define hsql__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer hsql__init_buffer
#endif

#ifdef yy_flush_buffer
#define hsql__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer hsql__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define hsql__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state hsql__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define hsql__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer hsql__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define hsql_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state hsql_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define hsql_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state hsql_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define hsql_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack hsql_ensure_buffer_stack
#endif

#ifdef yylex
#define hsql_lex_ALREADY_DEFINED
#else
#define yylex hsql_lex
#endif

#ifdef yyrestart
#define hsql_restart_ALREADY_DEFINED
#else
#define yyrestart hsql_restart
#endif

#ifdef yylex_init
#define hsql_lex_init_ALREADY_DEFINED
#else
#define yylex_init hsql_lex_init
#endif

#ifdef yylex_init_extra
#define hsql_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra hsql_lex_init_extra
#endif

#ifdef yylex_destroy
#define hsql_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy hsql_lex_destroy
#endif

#ifdef yyget_debug
#define hsql_get_debug_ALREADY_DEFINED
#else
#define yyget_debug hsql_get_debug
#endif

#ifdef yyset_debug
#define hsql_set_debug_ALREADY_DEFINED
#else
#define yyset_debug hsql_set_debug
#endif

#ifdef yyget_extra
#define hsql_get_extra_ALREADY_DEFINED
#else
#define yyget_extra hsql_get_extra
#endif

#ifdef yyset_extra
#define hsql_set_extra_ALREADY_DEFINED
#else
#define yyset_extra hsql_set_extra
#endif

#ifdef yyget_in
#define hsql_get_in_ALREADY_DEFINED
#else
#define yyget_in hsql_get_in
#endif

#ifdef yyset_in
#define hsql_set_in_ALREADY_DEFINED
#else
#define yyset_in hsql_set_in
#endif

#ifdef yyget_out
#define hsql_get_out_ALREADY_DEFINED
#else
#define yyget_out hsql_get_out
#endif

#ifdef yyset_out
#define hsql_set_out_ALREADY_DEFINED
#else
#define yyset_out hsql_set_out
#endif

#ifdef yyget_leng
#define hsql_get_leng_ALREADY_DEFINED
#else
#define yyget_leng hsql_get_leng
#endif

#ifdef yyget_text
#define hsql_get_text_ALREADY_DEFINED
#else
#define yyget_text hsql_get_text
#endif

#ifdef yyget_lineno
#define hsql_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno hsql_get_lineno
#endif

#ifdef yyset_lineno
#define hsql_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno hsql_set_lineno
#endif

#ifdef yyget_column
#define hsql_get_column_ALREADY_DEFINED
#else
#define yyget_column hsql_get_column
#endif

#ifdef yyset_column
#define hsql_set_column_ALREADY_DEFINED
#else
#define yyset_column hsql_set_column
#endif

#ifdef yywrap
#define hsql_wrap_ALREADY_DEFINED
#else
#define yywrap hsql_wrap
#endif

#ifdef yyget_lval
#define hsql_get_lval_ALREADY_DEFINED
#else
#define yyget_lval hsql_get_lval
#endif

#ifdef yyset_lval
#define hsql_set_lval_ALREADY_DEFINED
#else
#define yyset_lval hsql_set_lval
#endif

#ifdef yyget_lloc
#define hsql_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc hsql_get_lloc
#endif

#ifdef yyset_lloc
#define hsql_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc hsql_set_lloc
#endif

#ifdef yyalloc
#define hsql_alloc_ALREADY_DEFINED
#else
#define yyalloc hsql_alloc
#endif

#ifdef yyrealloc
#define hsql_realloc_ALREADY_DEFINED
#else
#define yyrealloc hsql_realloc
#endif

#ifdef yyfree
#define hsql_free_ALREADY_DEFINED
#else
#define yyfree hsql_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define hsql_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 179
#define YY_END_OF_BUFFER 180
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[1252] =
    {   0,
        0,    0,  176,  176,    2,    2,  180,  178,    4,    4,
      178,  178,  167,  174,  167,  167,  171,  167,  167,  167,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  167,  176,  177,    2,    2,    3,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    4,  162,    0,    1,    0,
      169,  168,  171,  164,  163,  161,  165,  173,  173,  173,

      173,  173,  173,   12,  173,  173,  173,   19,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,   69,  173,  173,   72,   81,  173,  173,
      173,  173,  173,  173,  173,  173,  173,   99,  173,  173,
      104,  107,  108,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  139,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  166,  176,  175,    2,    2,    2,    2,    1,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,  172,    0,  168,    5,  173,    7,
      173,  173,   10,  173,   13,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
       34,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   48,  173,  173,  173,  173,  173,  173,  173,  173,
      173,   58,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,   76,  173,  173,   84,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      100,  173,  173,  173,  105,  173,  173,  173,  173,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  125,
      173,  173,  173,  173,  173,  173,  173,  173,  173,  173,
      173,  173,  140,  173,  173,  173,  173,  173,  173,  173,

      173,  173,  173,  173,  173,  173,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  173,
      173,  173,  173,  173,  173,  173,  173,  173,   20,  173,
       22,   23,   24,  173,  173,  173,   29,  173,  173,   32,
       35,  173,  173,  173,  173,  173,   41,  173,  173,  173,
       46,   47,  173,  173,  173,  173,  173,  173,  173,   56,
      173,  173,   60,   61,  173,  173,   64,  173,  158,   66,
       67,  173,  173,  173,  173,  173,  173,   80,  173,   83,
       85,   86,  173,   88,  173,  173,   91,  173,  173,  173,

      173,  173,  102,  173,  173,  173,  173,  173,  112,  173,
      173,  115,  173,  173,  173,  173,  173,  173,  173,  173,
      127,  128,  173,  173,  173,  159,  173,  173,  135,  136,
      137,  173,  142,  173,  173,  173,  173,  173,  173,  173,
      173,  151,  173,  153,  173,  155,  156,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,    6,    8,  173,
       11,  173,   15,  173,  173,  173,  173,  173,  173,  173,
      173,  173,   31,  173,  173,  173,  173,  173,   40,  173,
      173,  173,  173,  173,  173,  173,  173,  173,  173,   55,

       57,  173,  173,   63,  173,   68,   70,  173,   73,   74,
      173,  173,  173,  173,   87,   89,  173,   92,   93,  173,
       96,  173,  173,  173,  173,  109,  110,  173,  173,  173,
      173,  173,  118,  173,  173,  173,  173,  126,  173,  173,
      173,  132,  173,  173,  173,  173,  144,  173,  173,  173,
      148,  173,  173,  173,  154,  157,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,

        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    0,  173,   14,  173,
       17,  173,  173,  173,   25,   27,  173,   30,  173,  173,
      173,  173,   39,  173,   43,  173,   45,   49,   50,  173,
       52,  173,  173,   59,   62,   65,   71,   75,  173,  173,
      173,   82,   90,   94,   97,  173,  101,  173,  106,  173,
      173,  173,  116,  173,  173,  120,  122,  124,  173,  130,

      173,  133,  173,  173,  173,  173,  145,  146,  147,  149,
      173,  173,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,    9,
       16,   18,   21,  173,   26,   28,  173,  173,   37,   38,
      173,  173,   51,   53,   54,   77,  173,  173,   95,   98,

      173,  173,  113,  114,  173,  173,  121,  123,  173,  131,
      173,  173,  173,  173,  150,  152,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    0,  173,   33,  173,   42,   44,
      173,   79,  103,  173,  117,  119,  129,  173,  173,  173,
      143,    2,    2,    2,    2,    2,    2,    2,    2,    2,
        2,    2,    2,    2,    2,    2,    2,    2,    0,  173,
      173,   78,  173,  134,  138,  173,    2,    2,    2,    2,

        2,    2,    2,    2,    0,    0,   36,  111,  173,    2,
        2,    2,    2,    2,    0,    0,  141,    2,    2,    2,
        0,    0,    2,    2,    0,    0,    2,    2,    0,    0,
        2,    2,    0,    0,    2,    2,    0,    0,    2,    2,
        0,  160,    2,    2,    0,    2,    0,    2,  170,    2,
        0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    6,
        6,    6,    6,    6,    8,    9,    6,   10,   11,   12,
       13,   14,   15,   16,   17,   18,   19,    6,    6,   20,
       21,   22,    6,    1,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   44,   45,   46,   47,   48,
        6,    1,    6,    6,   49,    1,   50,   51,   52,   53,

       54,   55,   56,   57,   58,   59,   60,   61,   62,   63,
       64,   65,   66,   67,   68,   69,   70,   71,   72,   73,
       74,   75,    6,   76,    6,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[77] =
    {   0,
        1,    1,    2,    1,    3,    1,    4,    1,    1,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    1,
        1,    1,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    1
    } ;

static const flex_int16_t yy_base[1259] =
    {   0,
        0,    0,  663,  653,   76,    0,  659, 8214,  151,  153,
      633,    0, 8214, 8214,  149,  148,  160,  159,  614,  604,
      156,  156,  165,  181,  192,  243,  173,  231,  208,  152,
      171,  230,  260,  255,  272,  256,    0,  301,  341,  393,
      293,  299,  290,  173,  548,    0,  607,    0,  183,  244,
      585,  594,    0,    0,  233,  451,  462,  229,  572,  570,
      481,  557,  611,  663,  711,  763,  341,  363,  810,  306,
      469,  477,  543,  861,  908,  959,  535,  555, 1008, 1060,
      582,  599,  650,  625,  513,  270, 8214,  570, 8214,  555,
      973, 1000, 1126, 8214, 8214, 8214, 8214,    0,  211,  233,

      350,  346,  242,  311,  463,  311,  309,    0,  384,  339,
      657,  385,  384,  721,  388,  364,  395,  443,  467,  473,
      774,  465,  476,  475,  473,  491,  495,  508,  509,  596,
      526,  532,  540,    0,  554,  562,  751,  569,  608,  597,
      646,  649,  718,  648,  660,  662,  660,  691,  671,  689,
      698,    0,  708,  698,  711,  733,  764,  800,  751,  754,
      768,  806,  812,  771,  811,  802,  824,  816,  829,  820,
      827,  824,  822,  847,  860,  859,  858,  861,  873,  869,
      857,  879, 8214,    0, 8214,    0,  342,    0,  549,    0,
      541, 1136, 1146, 1157,    0,    0,    0,    0,  883, 1003,

     1047, 1143, 1194, 1008, 1161, 1240, 1185, 1151, 1196, 1052,
     1243, 1283, 1283, 1296, 1348, 1345, 1356, 1295, 1239, 1389,
     1397, 1446, 1433, 1444, 1445, 1487, 1495, 1487, 1509, 1531,
     1530, 1536, 1566, 1572, 1580, 1619, 1620, 1669, 1618, 1665,
     1670, 1718, 1766, 1818, 1680, 1716, 1722, 1764, 1858, 1810,
     1861, 1814, 1872, 1902, 1905, 1916, 1935, 1955, 1965, 1971,
     1984, 2007, 2056, 2019, 2047, 2073, 2095, 2107, 2105, 2109,
     2149, 2149, 2162, 2167, 2219, 2206, 2218, 2221, 2250, 2267,
     2272, 2285, 2321,    0, 8214,  540, 2386,    0,  879,    0,
      880,  904,    0,  916,    0,  906,  914,  901,  919,  918,

      919, 1236,  927,  931,  961,  955,  951,  981,  995, 1010,
     1011, 1019, 1027, 1069, 1229, 1070, 1069, 1057, 1078, 1065,
     1077,    0, 1083, 1154, 1158, 1150, 1198, 1197, 1197, 1218,
     1302, 1293, 1296, 1300, 1311, 1293, 1309, 1309, 1330, 1332,
     1337, 1345, 1343, 1356, 1360, 1366, 1400, 1385, 1396,    0,
     1392, 1409, 1408, 1415, 1605, 1419, 1452, 1443, 1447, 1459,
        0, 1502, 1496, 1498, 1543, 1563, 1565, 1573, 1574, 1584,
     1601, 1610, 1637, 1619, 1632, 1638, 1655, 1661, 1673,    0,
     1664, 1661, 1670, 1679, 1709, 1712, 1734, 1726, 1723, 1722,
     1731, 1742,    0, 1739, 1782, 1810, 1743, 1781, 1772, 1768,

     1787, 1789, 1811, 1822, 1833, 1826,    0,  538, 2396, 2320,
     2389, 2390, 2391, 2319, 2389, 2433, 2405, 2444, 2445, 2480,
     2458, 2487, 2490, 2539, 2538, 2530, 2552, 2580, 2588, 2606,
     2625, 2593, 2638, 2641, 2658, 2690, 2688, 2714, 2716, 2740,
     2752, 2754, 2780, 2793, 2798, 2806, 2834, 2832, 2841, 2876,
     2860, 2888, 2903, 2928, 2929, 2938, 2964, 2973, 2987, 2993,
     3025, 3022, 3034, 3073, 3076, 3078, 3091, 3117, 3126, 3129,
     3078, 3133, 3168, 3131, 3161, 3185, 3237, 3197, 3219, 3245,
     3263, 3271, 3289, 3307, 3314, 3328, 3342, 3353, 3367, 3385,
     3392, 3406, 3422, 3436, 3452, 3476, 3494, 3480, 3505, 3519,

     3527, 3541, 3549, 3563, 3587, 3592, 3608, 3622, 3648, 3652,
     3676, 3690, 3694, 3696, 3734, 3732, 3748, 3760, 3759, 3804,
     3796, 3802, 3846, 3840, 3854, 3843, 3890, 3894,  534, 1848,
     1856, 1851, 1858, 1870, 1881, 1926, 1924, 1937,    0, 1944,
        0,    0, 1972, 1962, 1973, 1995,    0, 1994, 1999, 2007,
        0, 2021, 2023, 2016, 2018, 2038, 2032, 2054, 2058, 2057,
        0,    0, 2071, 2075, 2105, 2110, 2141, 2151, 2161,    0,
     2150, 2177,    0,    0, 2179, 2170,    0, 2194,    0,    0,
     2193, 2220, 2211, 2208, 2248, 2257, 2316,    0, 2267,    0,
        0,    0, 2260,    0, 2272, 2281,    0, 2283, 2320, 2312,

     2310, 2332,    0, 2339, 2339, 2391, 2392, 2398,    0, 2411,
     2447,    0, 2442, 2446, 2445, 2464, 2458, 2474, 2504, 2508,
        0,    0, 2507, 2518, 2516,    0, 2544, 2545,    0,    0,
     2560, 2577,    0, 2596, 2587, 2588, 2613, 2599, 2636, 2642,
     2643,    0, 2633,    0, 2654,    0, 2642,  525, 3903, 3938,
     3938, 3946, 3976, 3981, 3994, 3992, 4020, 4032, 4050, 4035,
     4064, 4089, 4086, 4088, 4114, 4128, 4142, 4130, 4163, 4149,
     4179, 4193, 4207, 4223, 4226, 4261, 4275, 4283, 4272, 4308,
     4317, 4326, 4359, 4367, 4370, 4373, 4419, 4328, 4417, 4420,
     4470, 4468, 4469, 4498, 4520, 4522, 4527, 4541, 4557, 4565,

     4585, 4600, 4583, 4629, 4632, 4677, 4616, 4673, 4674, 4715,
     4718, 4721, 4724, 4759, 4771, 4772, 4784, 4813, 4826, 4829,
     4864, 4873, 4878, 4886, 4908, 4927, 4922, 4946, 4972, 4984,
     4971, 5006, 5025, 5024, 5050, 5059, 5066, 5084, 5095, 5104,
     5113, 5120, 5143, 5145, 5148, 5167, 5189, 5197, 5202, 5150,
     5196, 5204, 5245, 5239, 5253, 5269, 5293, 5302, 5313, 5322,
     5337, 5351, 5366, 5375, 5400, 5382,  517,    0,    0, 2643,
        0, 2670,    0, 2680, 2681, 2705, 2703, 2706, 2697, 2696,
     2722, 2742,    0, 2742, 2738, 2772, 2771, 2788,    0, 2792,
     2789, 2800, 2822, 2857, 2849, 2855, 2879, 2896, 2906,    0,

        0, 2899, 2917,    0, 2940,    0,    0, 2928,    0,    0,
     2939, 2958, 3186, 2961,    0,    0, 2978,    0,    0, 2991,
     2998, 3035, 3026, 3040, 3033,    0,    0, 3057, 3054, 3076,
     3132, 3139,    0, 3190, 3195, 3194, 3200,    0, 3221, 3232,
     3239, 3239, 3246, 3254, 3281, 3283,    0, 3285, 3296, 3297,
        0, 3299, 3323, 3329,    0,    0,  484, 5400, 5426, 5435,
     5444, 5455, 5464, 5489, 5503, 5504, 5529, 5544, 5554, 5563,
     5583, 5592, 5607, 5621, 5622, 5647, 5599, 5646, 5661, 5675,
     5676, 5690, 5701, 5710, 5725, 5739, 5744, 5764, 5773, 5792,
     5805, 5818, 5780, 5834, 5852, 5855, 5876, 5885, 5899, 5923,

     5929, 5946, 5965, 5971, 5989, 6007, 6020, 6031, 6050, 6058,
     6073, 6074, 6097, 6115, 6121, 6118, 6139, 6166, 6168, 6194,
     6192, 6206, 6218, 6236, 6248, 6262, 6276, 6250, 6274, 6315,
     6306, 6313, 6331, 6349, 6373, 6379, 6392, 6412, 6430, 6417,
     6431, 6446, 6467, 6488, 6491, 6507,  478, 3331,    0, 3323,
        0, 3330, 3343, 3330, 3351,    0, 3368,    0, 3374, 3393,
     3389, 3382,    0, 3410,    0, 3412,    0,    0,    0, 3419,
        0, 3418, 3420,    0,    0,    0,    0,    0, 3436, 3451,
     3457,    0,    0, 3451,    0, 3462,    0, 3477,    0, 3464,
     3484, 3487,    0, 3535, 3540, 3529, 3530,    0, 3539,    0,

     3548,    0, 3561, 3581, 3587, 3577,    0,    0,    0,    0,
     3580, 3596,  477, 6535, 6536, 6535, 6551, 6570, 6590, 6598,
     6600, 6619, 6635, 6643, 6659, 6689, 6683, 6692, 6713, 6734,
     6737, 6765, 6778, 6779, 6809, 6817, 6822, 6822, 6858, 6867,
     6871, 6902, 6911, 6915, 6946, 6954, 6973, 6968, 6998, 7000,
     7014, 7023, 7042, 7056, 7075, 7084, 7104, 7113, 7128, 7154,
     7163, 7163, 7189, 7198, 7207, 7231, 7240, 7249, 7273, 7292,
     7291, 7315, 7333, 7334, 7357, 7375, 7383, 7399,  442,    0,
        0,    0,    0, 3605,    0,    0, 3613, 3620,    0,    0,
     3621, 3630,    0,    0,    0,    0, 3649, 3644,    0,    0,

     3639, 3653,    0,    0, 3650, 3669,    0,    0, 3676,    0,
     3702, 3712, 3710, 3729,    0,    0,  436, 7413, 7427, 7441,
     7455, 7466, 7480, 7488, 7502, 7514, 7516, 7528, 7540, 7542,
     7554, 7566, 7568, 7590, 7598, 7597, 7600, 7633, 7641, 7653,
     7658, 7666, 7692, 7704, 7716, 7718, 7742, 7740, 7768, 7766,
     7792, 7790, 7816, 7818,  436, 3736,    0, 3735,    0,    0,
     3743,    0,    0, 3761,    0,    0,    0, 3772, 3782, 3791,
        0,  434, 7831, 7846, 7860, 7872, 7884, 7885, 7886, 7910,
     7925, 7924, 7939, 7954, 7963, 7978, 7992, 7993,  429,  348,
     3798,    0, 3788,    0,    0, 3802,  428, 8031, 8017, 8018,

     8052, 8060, 8063, 8053,  424, 3858,    0,    0, 3804,  422,
     3943, 8085, 8103, 8101,  418, 3868,    0,  417, 3871, 8110,
      382, 3865,  376, 3885,  371, 3886,  369, 3894,  337, 3923,
      335, 3928,  324, 3946,  299, 3955,  296, 3968,  288, 3979,
      241, 8214,  238,    0,  196,  191,  181,  176, 8214,    0,
     8214, 8183, 8188,  186, 8193, 8198, 8203, 8208
    } ;

static const flex_int16_t yy_def[1259] =
    {   0,
     1251,    1, 1252, 1252, 1251,    5, 1251, 1251, 1251, 1251,
     1251, 1253, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1251, 1255, 1251, 1256, 1256, 1251,
     1256, 1257, 1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,
     1258, 1258,   62,   62,   62,   62,   65,   62,   65,   62,
       62,   62,   62,   62,   65,   65,   65,   62,   62,   62,
       65,   62,   62,   62, 1256, 1251, 1251, 1253, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1251, 1255, 1251, 1256, 1256, 1256, 1257, 1256,
     1256, 1256, 1256, 1256, 1256, 1256, 1256, 1256,   62,   62,

       62,   65,   65,   65,   65,   65,   65,   62,   62,   65,
       65,   65,   62,   62,   65,   65,   65,   62,   65,   65,
       65,   62,   65,   65,   62,   62,   62,   65,   62,   62,
       65,   65,   65,   65,   65,   62,   62,   65,   65,   62,
       62,   62,   62,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,
       65,   65,   65,   62,   62,   62,   62,   62,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   65,   62,
       62,   62,   62, 1256, 1251, 1251, 1251, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1256, 1256, 1256,   62,
       62,   62,   62,   65,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       65,   62,   65,   65,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   62,   62,   62,   62,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       65,   65,   65,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   65,   65,   65,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,

       62,   62,   62,   62,   62,   65,   65,   65,   65,   65,
       65,   65,   65,   62,   62,   65,   65,   62,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65, 1251, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1256,   65,   65,
       62,   62,   62,   65,   62,   65,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   65,   65,

       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   62,   62,   62,   65,   65,   65,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   65,   65,   62,   62,
       62,   65,   62,   62,   62,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   65,   65,   62,   62,
       62,   62,   62,   62,   62,   65, 1251, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1256,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   65,   65,
       62,   62,   62,   62,   62,   62,   65,   62,   62,   62,
       62,   65,   62,   62,   62,   62,   65,   62,   62,   62,
       62,   62,   65,   65,   65,   65,   65,   65,   65,   65,

       65,   62,   65,   65,   65,   65,   65,   65,   65,   62,
       65,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   62,   62,   62,
       62,   65,   65,   65,   65,   65, 1251, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1256,   62,   62,   65,   65,   65,   62,   62,
       65,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   65,   65,   65,
       65,   65,   65,   65,   65,   62,   62,   62,   62,   65,
       65,   65,   65,   65,   65,   65,   62,   62,   62,   62,
       62,   65,   65,   65,   65,   65,   65,   65,   65,   65,
       65,   65,   65,   65,   65,   65,   65,   65, 1251, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,

     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1256,   65,   65,   65,
       65,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   65,   65,   65,   65,   62,
       62,   62,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62, 1251, 1254, 1254, 1254, 1254, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254, 1254,
     1254, 1256,   62,   62,   62,   62,   62,   62,   62,   62,
       62,   62,   62,   62,   62,   62,   62,   62, 1251, 1254,
     1254, 1254, 1254, 1254, 1254, 1254, 1256,   62,   62,   62,

       65,   65,   65,   62, 1251, 1251, 1254, 1254, 1254, 1256,
     1256,   62,   62,   65, 1251, 1251, 1254, 1256, 1256,   65,
     1251, 1251, 1256, 1256, 1251, 1251, 1256, 1256, 1251, 1251,
     1256, 1256, 1251, 1251, 1256, 1256, 1251, 1251, 1256, 1256,
     1251, 1251, 1256, 1256, 1251, 1256, 1251, 1256, 1251, 1256,
        0, 1251, 1251, 1251, 1251, 1251, 1251, 1251
    } ;

static const flex_int16_t yy_nxt[8291] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       19,   20,   21,   22,   23,   24,   25,   26,   27,   28,
       29,   30,   31,   32,   33,   34,   35,   36,   37,   38,
       39,   40,   41,   42,   43,   37,   44,   37,    8,   21,
       22,   23,   24,   25,   26,   27,   28,   29,   30,   31,
       32,   33,   34,   35,   36,   37,   38,   39,   40,   41,
       42,   43,   37,   44,   37,   45,   48,   49,   50,   51,
       52,   53,   54,   55,   56,   57,   57,   57,   57,   57,
       57,   57,   57,   57,   57,   58,   59,   60,   61,   62,

       63,   64,   65,   66,   67,   68,   69,   70,   71,   72,
       73,   74,   75,   76,   77,   78,   79,   80,   81,   82,
       83,   77,   84,   77,   48,   61,   62,   63,   64,   65,
       66,   67,   68,   69,   70,   71,   72,   73,   74,   75,
       76,   77,   78,   79,   80,   81,   82,   83,   77,   84,
       77,   85,   86,   86,   86,   86,   89,   91,   91,   91,
       91,   91,   91,   91,   91,   91,   91,   90,   92,   93,
       93,   93,   93,   93,   93,   93,   93,   93,   93,   94,
       95,   99,  105,  100,  187,   86,  106,  109,  139,  101,
       98,  102,  107, 1250,  110,  103,  104,  140, 1249,  182,

     1248,  111,  108,  113,  112, 1247,  128,  114,   99,  105,
      100,  115,  129,  106,  109,  139,  101,  116,  102,  107,
      117,  110,  103,  104,  140,  118,  182,  119,  111,  108,
      113,  112,  120,  128,  114,  134,  288,  121,  115,  129,
      190,  135,  136,  137,  116,   86,   86,  117,  138,  195,
      196,  191,  118,  130,  119, 1246,  141,  131, 1245,  120,
      142,  132,  134,  288,  121,  122,  143,  133,  135,  136,
      137,   86,   86,  123,  289,  138,  124,  147,  155,  125,
      130,  294,  126,  141,  131,  127,  144,  142,  132,  156,
      145,  148,  122,  143,  133,  157,  146,  149,  150,  151,

      123,  289, 1243,  124,  147,  155,  125,  152,  294,  126,
     1241,  153,  127,  144,  154, 1239,  156,  145,  148,  180,
      181,  178,  157,  146,  149,  150,  151,  158,  175,  179,
      176,  159,  199,  177,  152,  295,  199,  160,  153,  299,
     1237,  154,  240,  187,   86,  300,  180,  181,  178, 1206,
     1206, 1235,  199, 1233,  158,  175,  179,  176,  159,  199,
      177,  303,  295,  199,  160,  161,  299,  162,  292,  240,
      163,  293,  300,  164,  229,  165,  199,  166,  167,  199,
      230,  199, 1231,  290, 1229,  231,  199,  168,  303,  232,
     1227,  291,  161,  233,  162,  292, 1225,  163,  293,  234,

      164,  229,  165,  199,  166,  167,  319,  230,  199,  199,
      290,  308,  231,  199,  168,  169,  232,  301,  291,  170,
      233,  309,  171,  172,  302,  310,  234,  317,  318,  173,
      311,  320,  174,  319, 1223, 1221,  199, 1218,  308, 1215,
     1210, 1205,  169, 1197,  301, 1189,  170, 1172,  309,  171,
      172,  302,  310, 1155,  317,  318,  173,  311,  320,  174,
      192,  192,  192,  192,  192,  192,  192,  192,  192,  192,
      193,  194,  194,  194,  194,  194,  194,  194,  194,  194,
      194,  186,  186,  321,  186,  186,  186,  186,  186,  186,
      296,  297,  322, 1117, 1079,  241, 1013,  323,  329,  199,

      186,  186,  186,  242,  298,  199,  200,  243,  201,  330,
      321,  331,  332,  244,  202,  199,  203,  296,  297,  322,
      204,  205,  241,  199,  323,  329,  199,  333,  334,  947,
      242,  298,  199,  200,  243,  201,  330,  857,  331,  332,
      244,  202,  199,  203,  335,  336,  767,  204,  205,  648,
      199,  529,  408,  407,  333,  334,  186,  186,  186,  339,
      186,  186,  186,  186,  186,  186,  286,  340,  199,  245,
      199,  335,  336,  246,  285,  199,  186,  186,  186,  247,
      199,  259,  341,  206,  342,  260,  339,  207,  284,  199,
      198,  261,  197,  208,  340,  199,  245,  199,  186,  343,

      246,  199,  199,  209,  348,  188,  247,  199,  259,  341,
      206,  342,  260,  185,  207,  199,  199,  276,  261,  277,
      208,  279,  278,  183,   97,  199,  343,  199,  199,  280,
      209,  348,  186,  210,   96,  199,  337,  199,  349,  338,
      211,  199,  199,  350,  276,  199,  277,  212,  279,  278,
      213,  283,  199,   87,  199,  199,  280,  199, 1251,   47,
      210,  199,  199,  337,  199,  349,  338,  211,  199,   47,
      350,  199,  199,  351,  212, 1251,  199,  213,  283,  281,
      282,  352,  199,  353,  199,  214,  199,  357,  199,  215,
      304,  305,  306,  216,  307,  358,  199,  359,  199,  217,

      351,  360,  218,  199,  363, 1251,  281,  282,  352,  199,
      353,  364,  214,  199,  357, 1251,  215,  304,  305,  306,
      216,  307,  358,  199,  359,  365,  217, 1251,  360,  218,
     1251,  363,  361,  366, 1251,  362,  199,  199,  364,  367,
      354,  199,  355,  312,  219,  313,  220,  199,  314, 1251,
      368,  221,  365,  356,  315,  369,  222,  199, 1251,  361,
      366,  316,  362, 1251,  199, 1251,  367,  354,  199,  355,
      312,  219,  313,  220,  199,  314,  344,  368,  221,  375,
      356,  315,  369,  222,  199,  223,  345,  376,  316,  199,
      370,  346,  347,  224,  371, 1251,  225,  377,  324,  226,

      325,  383,  227,  344,  326,  228,  375, 1251, 1251,  199,
     1251,  327,  223,  345,  376,  328,  199,  370,  346,  347,
      224,  371,  372,  225,  377,  324,  226,  325,  383,  227,
      378,  326,  228,  384,  381,  373,  199,  235,  327,  379,
      374,  385,  328,  236,  237,  238,  386,  380,  382,  372,
      239,  387,  388,  391,  389,  199, 1251,  378,  392,  393,
      384,  381,  373, 1251,  235,  390,  379,  374,  385,  394,
      236,  237,  238,  386,  380,  382, 1251,  239,  387,  388,
      391,  389,  199,  248,  398,  392,  393,  199,  399,  395,
      396,  199,  390,  397,  400,  404,  394,  249,  405,  402,

      401,  406, 1251,  250,  251,  530,  531,  199, 1251,  199,
      248,  398,  403,  199,  199,  399,  395,  396,  199,  199,
      397,  400,  404, 1251,  249,  405,  402,  401,  406,  199,
      250,  251,  530,  531,  199,  252,  199,  532,  533,  403,
      199,  199,  534,  253,  535,  536,  199,  254,  199,  537,
      255,  538,  539,  199, 1251, 1251,  199, 1251, 1251, 1251,
     1251, 1251,  252, 1251,  532,  533,  543, 1251,  199,  534,
      253,  535,  536,  544,  254,  199,  537,  255,  538,  539,
      199,  256,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,  257,  543,  199,  545,  546,  547,  258,  199,

      544, 1251, 1251,  548,  199, 1251, 1251, 1251,  256,  287,
      287,  287,  287,  287,  287,  287,  287,  287,  287,  257,
     1251,  199,  545,  546,  547,  258,  199, 1251,  410,  199,
      548,  199,  262,  199,  263,  549,  550,  264,  199,  199,
      265,  199,  266,  199,  267,  268, 1251,  416,  199,  199,
     1251,  551,  552,  199,  269,  410,  199,  553, 1251,  262,
      199,  263,  549,  550,  264,  199,  199,  265,  199,  266,
      199,  267,  268,  199,  416,  199,  199,  199,  551,  552,
      199,  269,  270,  199,  553,  423,  271,  199,  411,  272,
      273,  554,  424,  199,  557,  558,  274,  199,  559,  275,

      199,  560,  561,  562,  199,  563,  199, 1251, 1251,  270,
      199, 1251,  423,  271,  199,  411,  272,  273,  554,  424,
      199,  557,  558,  274,  199,  559,  275, 1251,  560,  561,
      562, 1251,  563,  199,   92,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  193,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  412,  199,  199, 1251,
      564,  199,  565,  199,  413,  417, 1251,  422,  199, 1251,
      566, 1251, 1251, 1251,  199, 1251,  199,  199, 1251, 1251,

     1251,  199, 1251,  412,  199,  199,  199,  564,  199,  565,
      199,  413,  417,  421,  422,  199,  414,  566,  199,  415,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  567,  199,  199,  199, 1251,  568,  569, 1251,  199,
      421, 1251,  199,  414,  570,  199,  415,  199, 1251,  199,
     1251, 1251,  199,  199,  199,  555,  199,  199,  567,  199,
      540,  199,  541,  568,  569,  425,  199,  418,  419,  199,
      556,  570,  199,  199,  199,  199,  199,  542,  199,  443,
      199,  420,  555,  199,  199,  199, 1251,  540,  199,  541,
     1251, 1251,  425, 1251,  418,  419, 1251,  556, 1251,  199,

      199,  199,  199,  199,  542,  199,  443,  199,  420,  430,
      199,  199,  199,  199, 1251,  199,  426,  427,  428,  431,
      429,  199,  199,  199,  571,  199,  199,  572,  199,  199,
      573,  442,  199,  574,  575,  576,  430,  432,  577,  578,
      199,  199,  433,  426,  427,  428,  431,  429,  199,  199,
      199,  571,  199,  199,  572,  199,  199,  573,  442,  199,
      574,  575,  576, 1251,  432,  577,  578,  579,  199,  433,
      434, 1251,  435,  580, 1251,  436,  581,  582,  199,  583,
      199,  437,  584,  199,  439,  440,  585, 1251,  438,  199,
      199,  199,  586,  199,  579, 1251,  199,  434,  441,  435,

      580,  199,  436,  581,  582,  199,  583,  199,  437,  584,
      199,  439,  440,  585,  444,  438,  199,  199,  199,  586,
      199,  445,  199,  199,  199,  441,  587,  589,  199,  199,
      199,  590,  199,  591,  199,  592,  588,  199,  593, 1251,
      594,  444,  199, 1251, 1251, 1251, 1251,  597,  445,  199,
     1251,  199, 1251,  587,  589, 1251,  199,  199,  590,  199,
      591,  199,  592,  588,  199,  593,  451,  594,  199,  199,
      446,  199,  447,  199,  597,  199,  448,  452,  199,  199,
      598,  453,  199,  449,  199,  599, 1251,  450,  600,  199,
     1251,  199,  199,  451, 1251,  199, 1251,  446,  199,  447,

      199,  601,  199,  448,  452,  199,  199,  598,  453,  199,
      449,  199,  599,  199,  450,  600,  199,  199,  199,  199,
      456,  199,  199,  199,  602,  199,  454,  199,  601,  603,
     1251,  455,  199,  199, 1251,  199, 1251,  604, 1251,  199,
      199,  199, 1251, 1251,  199,  457, 1251,  456,  199,  199,
      199,  602,  199,  454,  199,  199,  603,  199,  455,  199,
      199,  199,  199,  199,  604,  199,  199,  458,  199,  461,
      459,  199,  457,  460, 1251,  199,  199,  199, 1251, 1251,
     1251,  199,  199,  605,  199, 1251, 1251, 1251,  199,  606,
      199,  607,  199, 1251,  458,  608,  461,  459,  199,  199,

      460,  462,  199,  199,  199,  199,  199,  199,  199,  609,
      605,  199,  199,  199,  463,  199,  606,  199,  607, 1251,
      199,  610,  608, 1251, 1251,  199,  199,  595,  462, 1251,
     1251, 1251,  199,  199,  199,  611,  609,  596,  199,  199,
      199,  463,  199,  612,  199,  199,  199,  199,  610,  464,
      199,  199,  199,  470,  595,  199,  199,  465,  199,  613,
      614,  615,  611,  199,  596,  199,  199, 1251, 1251, 1251,
      612,  616,  199,  199, 1251, 1251,  464,  199,  199, 1251,
      470,  617,  199,  199,  465,  199,  613,  614,  615, 1251,
      199,  199,  199,  199,  466,  471,  199,  618,  616,  619,

      199,  199,  199,  620,  467,  621,  199,  622,  617,  468,
      469,  199,  623,  199,  199,  199,  472, 1251,  199,  479,
      199,  466,  471,  199,  618,  199,  619,  199,  199,  199,
      620,  467,  621,  199,  622, 1251,  468,  469,  199,  623,
      199,  199,  199,  472,  199,  473,  479,  199,  199,  199,
      624,  480,  199,  625,  199,  199,  199,  481,  626,  627,
      628,  199,  199,  629,  199, 1251,  630,  199,  631, 1251,
     1251,  199,  473, 1251,  632,  199,  199,  624,  480,  637,
      625,  199,  199,  199,  481,  626,  627,  628,  199,  199,
      629,  199,  199,  630,  199,  631,  199,  199,  474,  199,

      475,  632,  199,  638,  199,  482,  637,  639,  633,  199,
      640,  641,  199, 1251, 1251, 1251, 1251,  634, 1251,  199,
     1251, 1251, 1251,  199,  199,  474,  199,  475, 1251,  199,
      638,  199,  482,  642,  639,  633,  199,  640,  641,  199,
      476,  487,  477,  485,  634,  199,  635,  199,  636,  199,
      199,  199,  643,  478,  199,  199, 1251,  644,  199,  199,
      642,  645,  646,  199, 1251,  647, 1251,  476,  487,  477,
      485, 1251,  199,  635,  199,  636,  199,  199,  199,  643,
      478,  199,  199,  486,  644,  199,  199,  768,  645,  646,
      199,  199,  647,  199,  199,  769,  199,  770,  199,  483,

     1251,  199,  484,  199,  771,  199,  199,  199, 1251,  772,
      486, 1251,  199, 1251,  768, 1251,  773,  199,  199, 1251,
      199,  199,  769,  199,  770,  199,  483,  488,  199,  484,
      199,  771,  199,  199,  199,  199,  772,  199,  199,  199,
      199, 1251,  199,  773,  199,  199,  489,  199, 1251,  199,
      199,  199,  774, 1251,  488,  490,  199,  491, 1251,  775,
     1251,  199,  199,  776,  199,  199,  777,  199,  199,  199,
      199, 1251,  199,  489,  199,  199,  199,  199,  199,  774,
      199,  492,  490,  199,  491,  493,  775,  494,  199, 1251,
      776,  199, 1251,  777,  778,  199,  779,  199,  199,  497,

      495,  199,  199,  780,  199,  496,  199,  199,  492, 1251,
      199,  199,  493, 1251,  494, 1251,  199,  498,  199,  199,
     1251,  778, 1251,  779,  199,  199,  497,  495,  199,  199,
      780,  199,  496,  199,  781,  782,  499,  199,  199,  783,
      199,  503,  199,  199,  498,  199,  199,  199,  784,  199,
     1251,  199,  199, 1251,  785,  504,  199,  786,  787,  788,
      789,  781,  782,  499, 1251,  199,  783,  199,  503,  199,
     1251,  790,  199,  199,  199,  784,  199,  505,  791,  199,
      500,  785,  504,  199,  786,  787,  788,  789,  792,  501,
      793,  199,  199,  199, 1251,  506,  199,  502,  790,  199,

      199,  199, 1251,  199,  505,  791, 1251,  500,  794,  199,
      199, 1251,  795, 1251, 1251,  792,  501,  793,  199,  199,
      199,  199,  506,  199,  502,  199,  199, 1251,  199,  508,
      199,  199,  510,  199,  507,  794,  199,  199,  199,  795,
      509,  199,  199,  199,  199,  199,  199,  796,  199,  199,
      199,  797,  199,  199,  199, 1251,  508, 1251,  199,  510,
      199,  507, 1251,  798,  199,  199, 1251,  509,  199,  199,
      199,  199,  199,  799,  796,  513,  199,  199,  797,  199,
      199,  199,  199,  511,  199,  199, 1251,  800,  199,  199,
      798,  801,  199,  199,  512,  199,  514,  199,  199,  802,

      799,  803,  513,  199,  515, 1251,  199,  804,  199,  199,
      511,  199,  199,  199,  800,  199,  199, 1251,  801,  199,
      199,  512,  199,  514,  199,  199,  802, 1251,  803,  805,
      199,  515,  199,  806,  804,  199,  518, 1251, 1251,  519,
      199,  516,  199,  520,  199,  199,  807,  199,  199,  199,
      808,  521,  199,  809,  199,  199,  805,  199, 1251,  199,
      806,  517, 1251,  518,  199,  199,  519,  199,  516,  199,
      520,  199,  199,  807,  199,  199,  199,  808,  521,  199,
      809,  199,  199,  522,  199,  199, 1251,  810,  517,  523,
      199,  199,  199,  524,  199,  199,  811,  199,  526, 1251,

      814,  815,  199,  199, 1251,  816,  525,  817,  199,  818,
      522,  199,  199,  199,  810,  199,  523,  199,  199, 1251,
      524,  199,  199,  811,  199,  526,  527,  814,  815,  199,
      199,  199,  816,  525,  817,  199,  818, 1251,  199, 1251,
      199,  821,  199,  528,  812,  199,  199,  199,  199,  822,
      199,  199,  651,  527,  199,  813,  199,  199,  199,  199,
      819,  820,  823,  824,  199,  825,  199,  199,  821, 1251,
      528,  812, 1251,  199,  199, 1251,  822,  199,  199,  651,
     1251,  199,  813,  199,  199, 1251,  199,  819,  820,  823,
      824,  199,  825,  199,  199,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  649,  199,  650, 1251,  199,
      199,  199,  199, 1251,  199,  199,  199,  199, 1251,  199,
      826,  827,  828,  829,  199,  199,  199,  199,  199, 1251,
      199, 1251,  649,  199,  650,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  652,  199,  826,  827,  828,
      829,  199,  199,  199,  199,  199,  199,  199,  199,  830,
      199,  199,  199,  199,  199,  654,  831,  199,  199, 1251,
      653,  199,  652, 1251,  199,  832,  833,  834,  656, 1251,
      199,  199,  835,  199,  199,  199,  830,  199,  199, 1251,

      199,  199,  654,  831,  199,  199,  199,  653,  199,  836,
      199,  199,  832,  833,  834,  656,  199,  199,  199,  835,
      657,  199,  199,  658,  655,  199,  199,  199,  837, 1251,
      199,  199,  199,  199,  838,  199,  836,  199, 1251, 1251,
      839, 1251, 1251,  199,  840, 1251,  841,  657, 1251,  199,
      658,  655,  199,  199,  199,  837,  199,  199, 1251,  199,
      199,  838,  199,  659,  199,  660,  199,  839,  199,  199,
      842,  840,  663,  841,  199,  199,  199,  662,  199, 1251,
      661,  843,  199,  199,  199,  199,  664,  199,  199, 1251,
      659,  199,  660,  199, 1251,  199,  199,  842,  199,  663,

      844,  199,  199,  199,  662,  199,  199,  661,  843,  199,
      199,  199,  199,  664,  199,  199,  199,  845,  199,  669,
      846,  665,  847,  199,  199,  199,  199,  844,  667,  199,
      848, 1251,  199,  199,  666,  849,  199,  199, 1251,  199,
      850,  199,  199,  199,  845,  199,  669,  846,  665,  847,
      199,  199,  199,  199, 1251,  667,  199,  848,  199,  199,
      199,  666,  849,  199,  851,  668,  199,  850,  852,  199,
      199,  199,  853,  199,  671,  854,  199, 1251,  670,  199,
      855,  199,  856,  199,  199,  199,  199,  199,  672, 1251,
      948,  851,  668, 1251,  199,  852,  949,  199,  199,  853,

      199,  671,  854,  199,  199,  670,  950,  855,  199,  856,
      199,  199,  673,  199,  674,  672,  199,  948,  199, 1251,
      199,  199,  951,  949,  199, 1251,  199,  952,  953,  675,
      954,  199,  955,  950,  199, 1251,  199,  956,  676,  673,
      199,  674,  677,  199,  199,  199,  199,  199, 1251,  951,
      199,  199,  199,  199,  952,  953,  675,  954,  957,  955,
      199,  199,  199,  199,  956,  676,  199,  199,  958,  677,
      199,  199,  959,  199,  960,  679,  199,  199,  199,  199,
      199,  678,  199, 1251,  199,  957,  199,  199,  199,  199,
      199,  680, 1251,  199,  961,  958, 1251,  199,  199,  959,

      199,  960,  679,  199,  962,  199,  681,  199,  678,  199,
      199,  199, 1251,  199,  963,  199,  199,  199,  680,  199,
      682,  961,  964,  199,  199,  199,  199,  199,  199,  199,
      965,  962,  683,  681,  199,  966,  199,  199, 1251,  199,
     1251,  963,  199,  199,  199, 1251,  199,  682,  967,  964,
      199,  199,  199,  199, 1251,  199,  199,  965,  684,  683,
      199,  199,  966,  199,  199,  199,  199,  199, 1251,  199,
      199,  199,  685, 1251,  686,  967,  199,  199, 1251,  199,
      199,  199, 1251,  968, 1251,  684,  199,  199, 1251, 1251,
      969,  199,  199,  199,  199,  199,  970,  199, 1251,  685,

      688,  686, 1251,  199,  199,  199, 1251,  199,  199,  199,
      968,  199, 1251,  199,  689,  687,  199,  969,  199,  971,
      199,  199,  199,  970,  199,  690,  972,  688, 1251,  199,
      973, 1251,  199,  199,  199, 1251,  199, 1251,  199,  199,
      974,  689,  687,  199, 1251,  199,  971, 1251,  199,  199,
      975,  199,  690,  972,  199,  199,  199,  973,  199,  199,
      199,  199,  691,  692,  199,  199,  199,  974,  976,  977,
     1251,  693, 1251,  199,  199,  199,  199,  975,  199, 1251,
      978,  199,  199,  199,  979,  199,  199,  694, 1251,  691,
      692,  199,  199, 1251,  982,  976,  977,  199,  693,  199,

      199,  199,  199,  983,  199,  199,  199,  978,  199,  199,
      199,  979, 1251,  199,  694,  695,  696,  984,  199,  199,
      199,  982,  199,  697,  199, 1251,  199,  199, 1251,  199,
      983,  199,  199,  199, 1251,  199,  199, 1251,  985,  199,
      199, 1251,  695,  696,  984,  199,  199,  199,  199,  199,
      697,  199,  199, 1251,  199,  199,  199,  986,  199,  199,
      199,  199,  698,  699,  199,  985,  199,  987,  199,  988,
      199,  199, 1251,  700,  989,  199, 1251, 1251,  199,  199,
      199, 1251,  199,  990,  986,  199, 1251,  199,  199,  698,
      699,  199, 1251,  991,  987,  199,  988,  199,  199,  199,

      700,  989,  199,  199,  703,  701,  199,  199,  199,  199,
      990,  199,  702,  709,  199,  992, 1251,  704,  199,  199,
      991,  199,  199,  199,  199, 1251,  199,  199, 1251,  199,
      199,  703,  701,  199, 1251,  199,  199,  199,  199,  702,
      709,  199,  992,  705,  704,  199,  199,  199,  199,  199,
      199,  199,  706,  199,  199,  199,  199,  711,  993,  199,
     1251,  199,  707,  199,  199,  199,  199,  199,  199,  994,
      705,  708,  199,  199,  199,  199, 1251,  199,  199,  706,
      199, 1251,  199,  199,  711,  993,  199,  199,  199,  707,
      199,  712,  199,  199,  199,  199,  994,  199,  708,  199,

      199,  199,  199,  199,  199,  199, 1251,  199,  199,  710,
      713,  199,  995,  199,  199,  199, 1251,  996,  712,  997,
     1251,  199, 1251,  199,  199,  716,  980,  199,  199,  981,
      199,  199, 1251,  199,  199,  199,  710,  713,  199,  995,
      199,  998,  199,  199,  996,  199,  997,  717,  199,  199,
      199,  999,  716,  980,  199,  199,  981, 1000,  199,  714,
      199, 1001, 1251,  199, 1251,  199, 1251,  199,  998,  715,
      199,  199,  199,  199,  717,  199,  199, 1251,  999, 1002,
     1251,  199,  199,  199, 1000, 1003,  714,  718, 1001,  199,
      199,  199,  199,  199,  199, 1004,  715,  199,  199,  199,

      199,  199,  199, 1005,  719, 1006, 1002,  199,  199,  199,
      199, 1007, 1003,  720,  718,  199,  199,  199,  199,  199,
      199, 1008, 1004, 1009,  199,  199,  199, 1251,  199,  721,
     1005,  719, 1006,  199,  199,  199,  199,  199, 1007, 1010,
      720, 1251,  199,  199,  199, 1011,  199,  722, 1008,  199,
     1009, 1012,  199,  199,  199, 1251,  721, 1080, 1081,  199,
      199,  199,  199,  199,  199, 1082, 1010,  723,  199, 1083,
      199, 1084, 1011,  199,  722,  199,  199,  199, 1012,  725,
      199,  199,  724,  199, 1080, 1081,  199,  199,  199,  199,
      199, 1085, 1082,  726,  723,  199, 1083,  199, 1084,  199,

      199, 1086,  199,  199,  199, 1251,  725,  727, 1087,  724,
      199,  199, 1251,  199,  199,  199,  199, 1088, 1085, 1251,
      726,  199, 1089, 1090,  199,  199,  199,  728, 1086, 1251,
      199,  199,  199, 1091,  727, 1087, 1092,  199,  199,  199,
      199,  199,  199,  729, 1088, 1093,  199, 1251,  199, 1089,
     1090,  199,  199, 1094,  728,  199,  730,  199,  199,  199,
     1091, 1095,  199, 1092,  199, 1251,  199,  199,  199,  731,
      729,  199, 1093,  199,  732, 1096,  199, 1097,  199, 1098,
     1094,  199,  199,  730,  199,  199, 1251,  199, 1095,  199,
     1251, 1099,  199, 1251,  199, 1100,  731,  199,  199, 1101,

     1251,  732, 1096,  199, 1097, 1102, 1098, 1251,  199,  199,
     1103,  199,  199,  735,  199,  199,  199,  733, 1099,  199,
      199,  199, 1100,  734,  199,  199, 1101,  199, 1251,  199,
     1251,  736, 1102, 1104,  199,  199,  199, 1103,  199,  199,
      735,  199,  199,  199,  733,  199, 1251,  199,  199,  199,
      734,  199,  199,  738,  199,  737,  199,  199,  736, 1105,
     1104,  199,  199,  199, 1106,  199,  199,  199,  199, 1107,
     1108,  199,  199,  199, 1109,  199,  199,  199,  199,  199,
      738, 1110,  737, 1111,  199,  199, 1105,  199,  739,  199,
      199, 1106,  199,  199,  199,  199, 1107, 1108,  199,  199,

      199, 1109,  199, 1112,  199, 1251,  199,  740, 1110,  199,
     1111, 1113,  199,  199,  199,  739,  199,  199, 1114, 1115,
      199, 1251,  199,  199,  741,  742,  199,  199, 1251, 1116,
     1112, 1156,  199,  199,  740, 1251,  199,  199, 1113, 1157,
      199,  199, 1158,  199,  199, 1114, 1115, 1159,  199,  743,
      199,  741,  742,  199,  199,  199, 1116,  199, 1156,  199,
      199, 1251,  199,  744,  199, 1251, 1157,  199,  199, 1158,
      199, 1160,  745, 1161, 1159,  199,  743, 1162, 1163, 1164,
      199,  199,  199,  199,  199,  746, 1251,  199,  199,  199,
      744, 1165,  199,  199,  199, 1251, 1251,  199, 1160,  745,

     1161, 1166, 1251, 1251, 1162, 1163, 1164, 1251,  199,  199,
      199,  199,  746,  747,  199,  199,  199, 1167, 1165,  199,
      199,  199,  750,  199,  199,  199,  199,  199, 1166,  749,
      199,  748,  199, 1251,  199,  199,  199, 1251,  199,  199,
      747, 1168,  199,  199, 1167, 1251, 1169, 1251,  199,  750,
      199, 1170,  199,  199,  199, 1171,  749,  199,  748,  199,
      199,  199,  199, 1251,  199,  199,  199,  751, 1168,  199,
      199, 1251,  199, 1169,  752, 1190, 1191,  199, 1170, 1251,
      199,  199, 1171,  753, 1192,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  751,  756,  754,  199,  755,  199,

     1193,  752, 1190, 1191,  199,  199,  199,  199,  199, 1251,
      753, 1192,  199,  199, 1251,  199,  199,  199, 1194, 1195,
      199, 1196,  756,  754, 1207,  755,  757, 1193, 1208,  199,
      199,  758,  199,  199,  199,  199,  199,  199, 1209, 1217,
      199,  199,  199, 1251,  759, 1194, 1195,  199, 1196, 1251,
      199, 1207, 1251,  757, 1251, 1208,  199,  199,  758, 1206,
     1206,  199,  199,  199,  199, 1209, 1217,  199,  199,  199,
      760,  759, 1251,  199,  199,  199,  199,  199,  763,  199,
      199,  199,  764,  199,  761,  199,  199,  199,  199,  199,
     1222,  199, 1251, 1224,  199,  762, 1251,  760, 1251,  199,

      199, 1216,  199,  199, 1226,  763,  199,  199,  199,  764,
      199,  761,  199,  199,  199,  199,  199, 1222,  199,  765,
     1224,  199,  762,  199, 1228,  199,  199,  199, 1216,  199,
      199, 1226, 1230,  766,  199,  199,  199, 1251,  199,  199,
     1232, 1251,  858,  199, 1211, 1206,  765, 1251,  199, 1251,
      199, 1228,  199, 1234,  199, 1251,  199,  199, 1236, 1230,
      766,  199,  199,  199,  199,  199,  199, 1232,  199,  858,
      199,  199,  199,  199,  199,  199,  199,  859,  199, 1251,
     1234, 1238,  199,  199,  860, 1236, 1219, 1251, 1251, 1251,
     1240,  199,  861, 1251, 1251,  199, 1242, 1251,  199,  199,

      199,  199,  199,  199,  859,  199,  199, 1244, 1238,  199,
      199,  860,  199, 1219,  199,  862,  863, 1240, 1251,  861,
      864,  199,  199, 1242,  199,  199,  199,  865, 1251,  199,
      199, 1251,  199,  199, 1244, 1251, 1251,  199, 1251,  199,
      199,  199,  862,  863, 1251, 1251,  866,  864,  199,  199,
      199,  199,  199,  199,  865, 1251,  199,  199,  199,  199,
     1251,  199,  199, 1251,  199,  199,  199,  199,  199, 1251,
     1251,  199,  867,  866, 1251, 1251,  199,  199,  199, 1251,
      199,  199, 1251,  199, 1251,  199,  199, 1251,  199,  199,
      199, 1251,  199,  199,  199,  199,  199, 1251,  199,  867,

      199, 1251, 1251,  199, 1251,  199, 1251,  199,  199, 1251,
      199,  868,  199,  199,  199,  199,  199,  199,  870,  199,
      869,  199,  199,  199,  199,  199, 1251,  199, 1251, 1251,
     1251, 1251,  199, 1251,  199,  199, 1251,  199,  868,  199,
      199,  199,  199,  199,  199,  870,  199,  869, 1251,  199,
      199,  199,  199,  871,  199, 1251, 1251, 1251,  199,  199,
      199,  199,  199,  199,  199,  199, 1251,  199,  199, 1251,
      873,  199,  199, 1251,  199,  199, 1251,  199,  199, 1251,
      871,  199,  199,  872,  199,  199, 1251,  199,  199,  199,
      199,  199,  199, 1251,  199,  199,  199,  873,  199,  199,

     1251,  199,  199,  199,  874,  199, 1251, 1251,  199,  199,
      872,  199,  875, 1251,  199,  199,  199, 1251, 1251,  199,
     1251,  199, 1251,  199,  199,  199,  199,  876,  199, 1251,
      199,  874, 1251,  199, 1251,  199, 1251, 1251,  199,  875,
      199,  199,  199, 1251, 1251, 1251,  199,  199,  879,  877,
     1251,  199,  199,  199,  876,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199,  878,  199,  199,  199,  199,  199,
     1251,  199, 1251, 1251,  199,  879,  877, 1251, 1251,  199,
     1251, 1251, 1251,  199, 1251,  199,  199, 1251,  199, 1251,
      199,  878, 1251,  199,  199,  199,  199, 1251,  199,  881,

      880,  199, 1251, 1251, 1251,  883,  199,  199,  199,  199,
      199, 1251,  199,  882, 1251,  199, 1251,  199, 1251,  199,
      199,  199, 1251,  199, 1251, 1251,  881,  880,  199,  199,
     1251, 1251,  883,  199,  199,  199,  199,  199, 1251,  199,
      882,  199,  199,  199,  199, 1251,  199,  199,  199, 1251,
      199, 1251,  199,  199,  890, 1251,  199,  199,  199,  199,
     1251,  199,  199,  884,  199, 1251,  199, 1251,  199, 1251,
      199,  199, 1251, 1251,  199,  199, 1251,  199, 1251,  199,
      199,  890, 1251, 1251,  199,  199,  199, 1251,  199,  199,
      884,  199,  199,  199,  199,  888,  885, 1251,  199,  199,

      199,  199,  199,  199,  199,  199,  199,  199,  199,  886,
      199,  887,  199,  199, 1251,  199, 1251, 1251,  199,  199,
     1251,  199,  888,  885, 1251, 1251,  199,  199, 1251,  199,
      199,  199,  199,  199,  199,  199,  886,  199,  887,  199,
      199,  889,  199,  199, 1251,  199,  199,  199, 1251, 1251,
      199, 1251,  199,  199,  199, 1251,  199, 1251, 1251,  199,
     1251,  891, 1251,  199,  199, 1251,  199, 1251,  889, 1251,
      199, 1251, 1251,  199,  199, 1251, 1251,  199, 1251,  199,
      199,  199, 1251,  199, 1251, 1251,  199, 1251,  891, 1251,
      199,  199,  892,  199,  199,  199,  199, 1251,  199,  199,

      199, 1251, 1251, 1251,  199,  199,  199, 1251, 1251, 1251,
     1251, 1251, 1251, 1251,  199,  199,  199, 1251, 1251,  892,
      893,  199,  199,  199,  199,  199,  199,  199,  199, 1251,
     1251,  199,  199,  199,  199, 1251, 1251, 1251, 1251, 1251,
     1251,  199,  199,  199,  199, 1251,  199,  893,  199, 1251,
      199,  199,  199, 1251, 1251,  199,  199,  894,  199, 1251,
      199,  199,  895, 1251, 1251, 1251,  199,  199,  199, 1251,
     1251,  199,  199,  199,  199,  199,  199,  199, 1251,  199,
     1251,  199, 1251,  199,  894,  199,  199,  199, 1251,  895,
      199, 1251,  199,  199,  199,  199, 1251,  199,  199,  199,

      199,  199,  199,  199, 1251,  896, 1251, 1251,  199, 1251,
      199,  897, 1251,  199, 1251,  199,  199,  199,  199,  199,
     1251,  199, 1251,  199,  199,  199,  199,  199,  899,  199,
      199,  199,  896, 1251, 1251, 1251,  199,  199,  897,  898,
     1251, 1251,  199,  199, 1251,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199, 1251,  899,  199,  199,  199, 1251,
     1251,  199,  199,  199,  199,  199,  898,  199,  900,  199,
     1251,  901,  199,  199,  199, 1251,  199,  199,  199, 1251,
     1251, 1251, 1251,  199, 1251, 1251, 1251, 1251,  199,  199,
     1251,  199,  199, 1251,  199,  900,  199, 1251,  901,  199,

     1251,  199, 1251, 1251,  199,  902,  904,  199,  199,  199,
      199, 1251,  199,  199,  199, 1251,  903,  199,  199,  199,
     1251, 1251,  199, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251,  902,  904,  199,  199,  199,  199, 1251,  199,
      199,  199, 1251,  903,  199,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  905,  199,  199, 1251,  199, 1251, 1251,  199,
     1251, 1251, 1251, 1251, 1251,  199, 1251,  199,  199, 1251,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  905,
      199,  199,  906,  199,  199, 1251,  199,  907,  199,  199,

     1251,  199,  199, 1251,  199, 1251, 1251,  199,  199, 1251,
      908, 1251, 1251, 1251,  199, 1251, 1251,  199,  199,  906,
      199,  199, 1251, 1251,  907,  199,  199, 1251,  199,  199,
      199,  199, 1251, 1251,  199,  199, 1251,  908, 1251, 1251,
     1251,  199, 1251, 1251,  199,  199,  199,  199,  199, 1251,
     1251, 1251, 1251,  909,  910,  911, 1251,  199,  199,  199,
     1251,  199,  199, 1251,  199, 1251,  199, 1251,  912,  199,
     1251,  199, 1251,  199,  199,  199, 1251, 1251, 1251, 1251,
      909,  910,  911, 1251, 1251,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199,  913,  912,  199, 1251,  199,  199,

      199,  199,  914,  199,  199, 1251, 1251, 1251,  199,  199,
      199, 1251,  915, 1251,  199, 1251,  199,  199, 1251,  199,
     1251,  913,  199, 1251,  199, 1251,  199,  199, 1251,  914,
      199,  199,  199, 1251,  199,  199,  199,  199,  199,  915,
     1251,  199, 1251,  199,  199, 1251,  199,  916,  199,  199,
     1251,  199,  199,  199,  199, 1251,  918,  199,  199,  199,
     1251,  199, 1251,  199, 1251,  199,  917, 1251,  199, 1251,
     1251,  199,  199,  199,  916,  199,  199, 1251, 1251,  199,
      199,  199,  199,  918,  199,  199, 1251, 1251, 1251, 1251,
      199, 1251,  199,  917,  919,  199, 1251,  199,  199,  199,

      199,  199,  199,  199, 1251, 1251,  920,  199,  199,  199,
      199, 1251, 1251, 1251,  199, 1251, 1251,  199,  199,  199,
      199,  919, 1251, 1251,  199,  199, 1251, 1251,  199,  199,
      199, 1251,  199,  920,  199,  199,  199,  199, 1251, 1251,
      921,  199,  199, 1251,  199,  199, 1251,  199, 1251, 1251,
      199,  199,  199, 1251,  199,  199, 1251,  199, 1251,  199,
      199,  199, 1251,  199,  922,  923, 1251,  921, 1251,  199,
      199,  199, 1251,  924, 1251, 1251,  199,  199,  199,  199,
      199,  199,  199, 1251, 1251,  199,  199,  199,  199,  199,
     1251,  922,  923,  925, 1251,  199,  199,  199,  199,  199,

      924,  926, 1251,  199, 1251,  199,  199,  199,  927, 1251,
     1251,  199,  199,  199, 1251, 1251,  199,  199, 1251,  199,
      925,  928,  199,  199,  199,  199,  199, 1251,  926,  199,
      199,  199,  199,  199,  199,  927, 1251, 1251,  199,  199,
      199,  199, 1251,  199,  199, 1251,  199, 1251,  928,  199,
      199,  199,  199,  929, 1251,  199,  199,  199,  199,  199,
      199,  199, 1251, 1251, 1251,  199,  199,  199,  199,  930,
      199,  199, 1251,  199,  199,  931,  199,  199,  199,  199,
      929,  199,  199,  199,  199,  199,  199,  199, 1251,  199,
      934,  199,  199,  932,  199,  199,  930,  199,  199, 1251,

      199,  199,  931,  199, 1251,  199,  199, 1251,  199, 1251,
      199,  199,  199,  199, 1251,  199,  199,  934,  199,  199,
      932,  199,  199,  199,  199,  933, 1251,  199,  199,  199,
      199,  199,  199,  199, 1251,  199,  935,  199,  199,  199,
      199,  199,  199,  199,  199, 1251,  199, 1251,  199,  199,
      199, 1251,  933, 1251,  199,  199,  199, 1251,  199,  199,
      199, 1251,  199,  935,  199,  199,  199, 1251,  199,  936,
      199,  199,  199, 1251,  937,  199,  199, 1251,  199,  199,
      199, 1251, 1251, 1251,  199,  199,  199, 1251,  199, 1251,
      199,  939, 1251,  199, 1251,  938,  936, 1251,  199,  199,

     1251,  937,  199, 1251,  199,  199,  199,  199, 1251,  199,
     1251,  199,  199,  199,  199,  199, 1251,  199,  939, 1251,
      199, 1251,  938, 1251, 1251,  199,  199, 1251,  199,  199,
      941,  199, 1251,  199,  940,  199,  199,  199,  199,  942,
     1251,  199,  199,  199, 1251, 1251, 1251,  199,  199,  199,
     1251,  943,  199,  199, 1251,  199, 1251,  941,  199,  199,
      199,  940,  199,  199,  199,  199,  942,  199,  199,  199,
      199, 1251, 1251,  199,  199,  199,  199,  199,  943,  199,
     1251,  199, 1251,  199, 1251,  199,  199,  199, 1251, 1251,
      199, 1251,  199,  944,  199,  199,  199,  199, 1251, 1251,

      199,  945,  199, 1251,  199,  199, 1251, 1251,  199, 1251,
      199,  199,  199, 1251,  199,  199, 1251,  199, 1251,  199,
      944,  199,  946,  199,  199, 1251,  199,  199,  945,  199,
      199, 1251,  199,  199, 1251,  199,  199, 1251,  199,  199,
      199, 1251,  199, 1251,  199,  199,  199, 1251,  199,  946,
     1251, 1251, 1251,  199,  199, 1251, 1251,  199, 1251,  199,
      199,  199,  199,  199, 1251, 1251,  199,  199,  199, 1251,
      199,  199,  199,  199, 1251,  199, 1251,  199, 1251,  199,
      199, 1015, 1014, 1251,  199,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199,  199,  199, 1251,  199,  199, 1251,

      199,  199,  199, 1251,  199, 1251,  199,  199, 1015, 1014,
      199,  199,  199, 1251, 1251, 1016,  199,  199,  199,  199,
     1251,  199, 1251, 1251, 1251,  199, 1018,  199,  199,  199,
      199, 1251, 1251,  199,  199,  199, 1251,  199, 1251,  199,
      199, 1251, 1016, 1251, 1017, 1251,  199, 1251, 1251,  199,
      199, 1251,  199, 1018, 1019,  199,  199,  199, 1251,  199,
      199,  199,  199, 1251, 1251,  199,  199,  199, 1020, 1251,
      199, 1017, 1251, 1251,  199,  199,  199,  199, 1251, 1251,
      199, 1019,  199, 1251, 1251, 1251,  199,  199, 1251, 1021,
      199, 1251,  199, 1251,  199, 1020,  199,  199,  199,  199,

     1251,  199,  199,  199, 1022, 1251, 1251,  199,  199,  199,
     1251, 1251, 1251,  199,  199, 1251, 1021,  199, 1024, 1023,
     1251,  199,  199,  199, 1251,  199,  199, 1251,  199,  199,
      199, 1022, 1028,  199,  199,  199,  199,  199,  199,  199,
      199, 1251, 1251,  199,  199, 1024, 1023,  199,  199,  199,
     1251, 1025,  199,  199, 1251,  199,  199,  199, 1026, 1028,
      199,  199, 1251, 1251,  199,  199,  199,  199,  199, 1027,
      199,  199, 1029,  199,  199,  199,  199,  199, 1025,  199,
      199, 1251,  199,  199,  199, 1026, 1251,  199, 1251, 1251,
     1251,  199,  199,  199,  199,  199, 1027,  199, 1251, 1029,

      199,  199,  199,  199,  199, 1030,  199,  199, 1251,  199,
      199,  199,  199, 1251,  199, 1251, 1251, 1031,  199,  199,
      199,  199,  199,  199,  199, 1032, 1251, 1033,  199,  199,
      199,  199, 1030,  199,  199,  199, 1034,  199,  199,  199,
      199, 1251, 1251, 1251, 1031, 1251,  199,  199,  199,  199,
      199,  199, 1032, 1251, 1033,  199,  199,  199,  199, 1251,
     1251,  199,  199, 1034,  199,  199, 1035,  199, 1251,  199,
     1251,  199, 1251,  199,  199,  199, 1251,  199,  199,  199,
     1036, 1251,  199,  199, 1037,  199, 1251, 1251,  199,  199,
      199, 1251,  199, 1035, 1038, 1251,  199, 1039,  199,  199,

      199, 1251,  199,  199,  199, 1251,  199, 1036, 1251,  199,
      199, 1037,  199, 1041, 1251,  199,  199,  199,  199,  199,
      199, 1038,  199, 1251, 1039,  199,  199,  199,  199, 1251,
      199,  199, 1251, 1251, 1251,  199,  199,  199,  199, 1251,
     1041,  199,  199, 1251,  199,  199,  199,  199,  199,  199,
     1251,  199,  199, 1251,  199,  199, 1251, 1251,  199, 1040,
     1251, 1251,  199, 1251,  199,  199, 1251,  199,  199,  199,
     1251,  199, 1251, 1251,  199,  199, 1251, 1251,  199,  199,
     1042,  199, 1251, 1251, 1251,  199, 1040,  199,  199, 1251,
      199,  199,  199, 1251,  199,  199,  199,  199, 1251, 1251,

      199,  199, 1251, 1251, 1251, 1251,  199, 1042, 1251,  199,
     1251,  199,  199, 1251,  199,  199,  199,  199,  199,  199,
      199,  199,  199, 1251,  199,  199, 1043,  199, 1251, 1251,
      199, 1251,  199, 1251,  199, 1251,  199, 1251,  199,  199,
     1251, 1251, 1251,  199,  199,  199, 1251,  199,  199, 1251,
     1251, 1251,  199, 1043, 1251, 1251,  199,  199,  199,  199,
     1251,  199,  199,  199,  199, 1251,  199, 1251,  199,  199,
     1044,  199, 1045, 1251,  199, 1251,  199, 1251, 1251, 1251,
     1251, 1251,  199,  199, 1251,  199, 1251, 1251, 1251,  199,
      199,  199,  199, 1251, 1251,  199,  199, 1044,  199, 1045,

      199,  199, 1251,  199, 1048, 1046,  199, 1251, 1047,  199,
      199,  199, 1251, 1251, 1251, 1251,  199, 1251, 1251,  199,
     1251, 1251,  199, 1251,  199,  199, 1251,  199, 1251,  199,
     1251, 1048, 1046,  199,  199, 1047, 1251,  199,  199, 1251,
      199, 1251,  199,  199, 1251, 1049, 1251,  199, 1251,  199,
     1251,  199,  199,  199, 1251,  199,  199, 1251, 1251, 1251,
      199,  199, 1251, 1251,  199,  199,  199,  199, 1251,  199,
     1251,  199, 1049, 1251,  199, 1251,  199, 1251, 1251,  199,
      199, 1251,  199,  199, 1050,  199, 1251,  199,  199, 1251,
      199,  199,  199,  199,  199,  199, 1052, 1251,  199, 1251,

     1251, 1251, 1251,  199,  199, 1251,  199,  199,  199,  199,
      199, 1050,  199, 1051,  199,  199, 1251,  199,  199,  199,
     1251,  199,  199, 1052, 1251, 1251, 1251, 1251, 1251, 1251,
      199,  199,  199,  199,  199,  199,  199,  199, 1053, 1251,
     1051,  199,  199, 1251, 1054,  199,  199, 1251,  199, 1251,
      199,  199, 1251,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1055,  199,  199, 1053,  199, 1251, 1251,  199,
     1251, 1054,  199, 1251,  199,  199, 1251,  199,  199,  199,
      199,  199,  199,  199,  199,  199, 1251,  199,  199, 1055,
      199, 1251, 1056,  199,  199, 1251,  199, 1251,  199,  199,

     1251,  199,  199, 1251,  199, 1251,  199, 1057, 1251, 1251,
     1251,  199,  199, 1251,  199, 1251, 1251, 1251, 1059, 1056,
      199,  199,  199,  199,  199,  199, 1251, 1251,  199,  199,
      199,  199,  199, 1058, 1057, 1251, 1060, 1251,  199,  199,
      199,  199,  199, 1251,  199, 1059, 1251,  199,  199,  199,
     1251,  199,  199, 1251,  199,  199, 1251,  199, 1061,  199,
     1058, 1251,  199, 1060,  199,  199,  199,  199, 1251,  199,
     1062,  199,  199, 1251,  199,  199,  199, 1251,  199,  199,
      199,  199,  199, 1251,  199, 1061,  199, 1063,  199,  199,
     1251,  199,  199,  199,  199, 1251,  199, 1062,  199,  199,

      199,  199,  199,  199, 1065,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1063,  199, 1251, 1064, 1251,  199,
      199,  199,  199,  199, 1251,  199, 1251,  199, 1067,  199,
     1251, 1065,  199,  199, 1251,  199,  199,  199, 1251,  199,
     1066,  199,  199, 1251, 1064,  199,  199,  199,  199,  199,
     1251,  199,  199, 1068, 1251, 1067, 1251, 1251,  199,  199,
     1251,  199, 1251,  199,  199, 1251,  199, 1066,  199,  199,
     1069,  199,  199,  199, 1251,  199,  199, 1251,  199,  199,
     1068, 1251,  199, 1251,  199,  199, 1251, 1251,  199,  199,
     1070,  199, 1251,  199,  199, 1071, 1251, 1069,  199, 1251,

     1251, 1072, 1251,  199, 1251, 1251,  199, 1251,  199,  199,
     1251,  199,  199,  199,  199, 1251,  199, 1070,  199,  199,
     1251,  199, 1071, 1251,  199,  199, 1251,  199, 1072, 1251,
     1251, 1251,  199,  199, 1251,  199, 1251,  199, 1073,  199,
      199,  199,  199, 1075, 1251,  199,  199,  199,  199, 1251,
     1251,  199,  199,  199,  199, 1074,  199,  199,  199,  199,
      199,  199, 1251,  199,  199, 1073,  199,  199, 1251,  199,
     1075, 1251, 1251, 1251,  199,  199,  199,  199, 1251,  199,
      199,  199, 1074,  199,  199,  199, 1076,  199,  199, 1077,
      199,  199, 1251,  199,  199, 1251, 1251, 1251, 1251, 1251,

      199, 1251,  199,  199,  199, 1251,  199,  199,  199, 1251,
     1078, 1251,  199, 1076, 1251, 1251, 1077, 1251,  199, 1251,
     1251,  199, 1251,  199,  199, 1251,  199,  199,  199,  199,
     1251,  199, 1251,  199,  199, 1251,  199, 1078, 1251,  199,
      199, 1251,  199, 1251, 1251, 1251, 1251,  199,  199, 1251,
      199,  199,  199,  199, 1251,  199, 1251, 1251,  199, 1251,
      199, 1118,  199,  199, 1251,  199,  199,  199,  199,  199,
     1119,  199,  199, 1251,  199,  199, 1251, 1251, 1251,  199,
      199,  199,  199, 1251,  199, 1251,  199, 1251, 1118,  199,
     1251,  199,  199,  199, 1251,  199,  199, 1119,  199,  199,

     1251, 1251,  199,  199, 1251, 1120, 1251,  199,  199,  199,
      199,  199, 1251,  199, 1251,  199, 1121, 1251,  199, 1251,
      199, 1251, 1251,  199,  199, 1251,  199, 1251,  199, 1251,
      199, 1251, 1120,  199,  199,  199,  199,  199, 1251, 1122,
     1123, 1251,  199, 1121,  199,  199, 1251,  199, 1251, 1251,
     1251,  199,  199,  199,  199,  199, 1251, 1251, 1251,  199,
      199,  199,  199,  199,  199, 1251, 1122, 1123, 1124, 1251,
      199,  199,  199, 1251, 1251,  199,  199, 1251,  199,  199,
      199,  199, 1251,  199, 1251, 1251,  199, 1251,  199, 1251,
     1251,  199,  199, 1125,  199, 1124, 1251,  199, 1251,  199,

     1251, 1251,  199,  199,  199,  199, 1251,  199, 1251, 1251,
      199, 1251, 1251, 1126, 1251,  199, 1127, 1251,  199,  199,
     1125,  199,  199,  199,  199,  199,  199,  199,  199,  199,
     1251,  199,  199, 1128,  199, 1251, 1251,  199, 1251, 1251,
     1126, 1251, 1251, 1127, 1251,  199,  199, 1251,  199,  199,
      199,  199,  199,  199,  199,  199,  199, 1129,  199,  199,
     1128,  199, 1251, 1251,  199, 1251, 1251,  199, 1251,  199,
      199, 1251,  199,  199,  199,  199, 1251,  199, 1251,  199,
      199, 1251,  199, 1251, 1129,  199, 1251, 1251, 1251, 1130,
     1251, 1251, 1251, 1251,  199, 1251,  199,  199,  199,  199,

      199,  199, 1251, 1251,  199,  199,  199, 1251, 1251,  199,
      199,  199,  199,  199,  199, 1251, 1130, 1251,  199,  199,
     1251, 1251, 1251,  199,  199,  199, 1251,  199, 1251, 1251,
     1251, 1251,  199, 1251, 1251, 1251, 1251,  199,  199,  199,
      199,  199,  199, 1131,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199,  199,  199, 1251, 1132,  199, 1251,
     1251, 1251,  199,  199, 1251, 1251, 1251,  199,  199,  199,
     1131,  199, 1251, 1251,  199,  199,  199, 1251, 1251,  199,
      199,  199,  199, 1251, 1132,  199, 1251, 1251, 1251,  199,
      199,  199, 1251,  199,  199,  199, 1251, 1251,  199, 1133,

      199, 1251,  199,  199,  199, 1251,  199,  199, 1251, 1251,
     1251,  199,  199, 1251, 1251, 1251,  199, 1251,  199, 1251,
      199, 1251, 1251, 1251, 1251,  199, 1133,  199, 1251,  199,
      199,  199, 1251,  199,  199,  199, 1251,  199,  199,  199,
     1251, 1251,  199,  199,  199, 1251,  199,  199,  199, 1251,
      199,  199, 1251, 1251, 1251,  199,  199, 1251, 1251, 1251,
      199, 1251,  199, 1251,  199, 1251, 1251, 1251, 1251,  199,
     1251,  199, 1251,  199,  199,  199, 1251,  199,  199,  199,
     1135,  199,  199,  199,  199, 1134,  199,  199, 1251, 1251,
      199,  199, 1251, 1251,  199, 1136, 1251, 1251,  199,  199,

      199, 1251, 1251,  199,  199, 1251,  199, 1135,  199,  199,
     1251,  199, 1134,  199,  199, 1251, 1251,  199,  199,  199,
     1251,  199, 1136, 1251,  199,  199,  199,  199,  199, 1251,
      199,  199, 1251,  199,  199,  199,  199, 1251, 1251, 1251,
     1137,  199, 1251, 1251,  199,  199,  199,  199, 1251,  199,
     1251,  199, 1251, 1251,  199,  199, 1138, 1251,  199,  199,
      199,  199,  199,  199, 1251, 1251, 1251, 1137,  199, 1251,
     1251,  199,  199, 1251,  199,  199,  199,  199, 1139, 1251,
     1251,  199,  199, 1138, 1251,  199,  199,  199, 1251,  199,
      199,  199, 1251, 1251, 1251,  199,  199, 1251, 1251, 1251,

     1251,  199,  199, 1251,  199, 1139, 1251, 1251,  199,  199,
      199, 1251, 1251, 1251,  199,  199,  199,  199,  199,  199,
      199, 1251, 1251,  199,  199, 1140, 1251, 1251,  199,  199,
     1141, 1251, 1251, 1251,  199,  199, 1251,  199, 1251,  199,
      199, 1251,  199,  199,  199, 1251,  199,  199, 1251,  199,
      199,  199, 1140, 1251,  199, 1251,  199, 1141,  199, 1142,
     1251,  199, 1251, 1251,  199, 1251,  199,  199, 1251, 1251,
      199, 1251, 1251, 1251,  199, 1251,  199,  199, 1143, 1251,
      199,  199, 1251, 1251,  199,  199, 1142, 1144, 1251,  199,
      199,  199, 1251,  199, 1251, 1251,  199, 1251,  199,  199,

      199,  199, 1251, 1145, 1251, 1143, 1251,  199,  199,  199,
     1251,  199, 1251, 1251, 1144, 1251,  199,  199, 1251, 1251,
      199, 1251,  199,  199,  199,  199,  199,  199, 1251, 1146,
     1145,  199, 1251,  199,  199,  199,  199, 1251,  199, 1251,
      199, 1251, 1147,  199, 1251, 1251, 1251,  199, 1251,  199,
     1251,  199,  199, 1251, 1251, 1251, 1146, 1251,  199, 1251,
      199,  199, 1251, 1251,  199,  199,  199,  199, 1251, 1147,
      199,  199, 1251, 1148,  199,  199,  199, 1251, 1251,  199,
      199, 1251,  199, 1251,  199,  199, 1251, 1251, 1251,  199,
     1251,  199, 1251,  199,  199, 1149, 1251, 1251,  199, 1251,

     1148, 1251,  199,  199, 1251, 1251,  199,  199,  199,  199,
     1251,  199,  199,  199, 1150, 1151,  199, 1251,  199, 1251,
     1251,  199, 1149, 1251,  199,  199,  199,  199, 1251, 1251,
     1251,  199,  199,  199, 1251,  199,  199,  199, 1251, 1251,
      199, 1150, 1151, 1251, 1251,  199, 1251, 1251,  199, 1251,
      199,  199,  199,  199,  199,  199, 1152, 1251,  199,  199,
      199, 1251, 1251,  199,  199, 1251,  199,  199,  199,  199,
     1251, 1251, 1251,  199,  199,  199, 1251,  199,  199,  199,
     1251, 1251,  199, 1152, 1251, 1251, 1251,  199, 1251, 1251,
      199, 1251,  199,  199,  199,  199,  199,  199, 1251, 1251,

      199,  199,  199, 1251, 1251,  199,  199, 1251,  199, 1251,
      199, 1251, 1251, 1251, 1251,  199,  199,  199,  199,  199,
      199, 1251, 1153,  199,  199, 1251, 1251, 1251,  199,  199,
     1251, 1251, 1154, 1251,  199,  199, 1251,  199, 1251,  199,
     1251, 1251,  199,  199,  199,  199,  199,  199,  199, 1153,
      199, 1251, 1251,  199, 1251,  199, 1251, 1251,  199, 1154,
      199,  199,  199, 1251, 1251, 1251,  199,  199, 1251, 1251,
     1251,  199,  199,  199,  199,  199,  199, 1251, 1251, 1251,
      199,  199, 1251, 1251, 1251,  199,  199,  199,  199,  199,
      199, 1251, 1173, 1251,  199,  199,  199, 1251, 1251,  199,

      199,  199,  199,  199, 1251, 1251,  199, 1251,  199, 1251,
      199, 1251,  199,  199,  199,  199,  199,  199,  199, 1173,
     1251, 1251,  199,  199,  199, 1251,  199,  199, 1174,  199,
     1251, 1251,  199,  199,  199, 1251, 1175,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199, 1251,  199, 1251,
      199,  199,  199,  199,  199, 1174, 1251, 1251,  199,  199,
      199,  199,  199, 1175,  199,  199, 1176,  199,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199, 1251, 1177,  199,  199,  199,  199,  199,  199,
      199,  199,  199, 1176,  199,  199,  199,  199,  199,  199,

      199,  199,  199,  199,  199,  199, 1251,  199, 1251, 1251,
     1177,  199,  199,  199,  199,  199,  199,  199, 1251,  199,
      199,  199, 1178,  199,  199,  199,  199,  199,  199,  199,
     1179,  199,  199,  199,  199,  199,  199,  199, 1251,  199,
      199,  199,  199,  199,  199,  199, 1251,  199, 1251, 1178,
     1251,  199, 1251,  199, 1251,  199, 1251, 1179, 1251,  199,
      199,  199,  199,  199,  199, 1251,  199,  199,  199,  199,
     1251,  199,  199,  199,  199, 1251,  199, 1251,  199, 1181,
     1180,  199, 1251,  199,  199, 1251,  199, 1251,  199,  199,
     1251, 1251,  199,  199,  199,  199,  199, 1251, 1251,  199,

      199,  199,  199,  199,  199,  199, 1181, 1180,  199, 1251,
      199,  199,  199,  199, 1251,  199,  199, 1251,  199,  199,
     1251,  199,  199,  199, 1251, 1251,  199, 1251,  199,  199,
      199,  199, 1251, 1182,  199, 1251, 1183, 1251,  199,  199,
      199, 1251,  199, 1251,  199,  199,  199, 1251,  199,  199,
      199, 1251,  199, 1251,  199,  199, 1251,  199, 1251, 1251,
     1182,  199,  199, 1183,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1251,  199,  199,  199,  199,  199,
     1251,  199, 1251, 1184, 1251, 1251,  199, 1251,  199,  199,
     1251,  199,  199,  199,  199,  199,  199,  199,  199,  199,

     1186, 1251,  199,  199,  199,  199, 1251, 1185, 1251, 1251,
     1184, 1251,  199,  199,  199,  199, 1188, 1251,  199,  199,
      199,  199,  199,  199, 1251,  199,  199, 1186,  199,  199,
     1251,  199, 1251, 1187, 1185, 1251,  199, 1251,  199,  199,
     1251,  199,  199, 1188,  199,  199,  199,  199,  199,  199,
     1251, 1251,  199,  199,  199,  199, 1251,  199, 1251, 1251,
     1187,  199,  199,  199,  199,  199, 1251,  199, 1251,  199,
     1198,  199,  199,  199, 1251,  199,  199,  199, 1251,  199,
     1251,  199,  199, 1251,  199, 1251,  199, 1251,  199,  199,
      199,  199,  199, 1251,  199, 1251,  199, 1198,  199,  199,

     1251, 1199,  199,  199,  199, 1251,  199, 1251,  199,  199,
      199,  199,  199,  199,  199,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1251,  199, 1200, 1251, 1199,  199,
      199,  199,  199,  199, 1251,  199,  199,  199,  199,  199,
      199,  199,  199,  199, 1251,  199,  199,  199,  199,  199,
      199,  199, 1251, 1200,  199,  199,  199,  199,  199,  199,
      199,  199, 1251,  199, 1201,  199, 1251,  199, 1251,  199,
      199,  199, 1251,  199, 1251,  199, 1251,  199,  199, 1251,
      199,  199,  199,  199,  199,  199, 1251,  199,  199,  199,
      199, 1201,  199,  199, 1251, 1251,  199,  199,  199,  199,

      199, 1251,  199, 1251,  199, 1251, 1251,  199,  199, 1202,
     1251,  199,  199, 1251,  199, 1203,  199,  199,  199,  199,
      199, 1251, 1204,  199,  199, 1251,  199,  199,  199,  199,
     1251,  199, 1211, 1206, 1251,  199, 1202, 1251,  199,  199,
     1251,  199, 1203, 1212,  199,  199,  199,  199,  199, 1204,
      199,  199, 1251,  199,  199,  199,  199,  199, 1251, 1251,
     1251,  199, 1251,  199,  199,  199,  199,  199, 1251, 1251,
     1212,  199, 1251, 1251,  199,  199, 1251,  199, 1251,  199,
      199,  199, 1251,  199,  199,  199, 1251,  199,  199, 1214,
      199,  199, 1213,  199,  199,  199,  199,  199,  199,  199,

      199, 1251, 1251,  199,  199,  199,  199, 1251,  199, 1251,
      199,  199,  199, 1251,  199,  199, 1214, 1251, 1251, 1213,
      199,  199,  199,  199,  199,  199,  199,  199, 1251,  199,
      199,  199,  199,  199,  199,  199, 1220, 1251,  199,  199,
     1251,  199,  199,  199, 1251,  199,  199, 1251,  199,  199,
      199, 1251, 1251, 1251, 1251,  199,  199, 1251,  199, 1251,
      199,  199, 1251, 1220, 1251, 1251,  199, 1251,  199, 1251,
      199, 1251,  199,  199, 1251, 1251,  199,  199, 1251, 1251,
     1251, 1251,  199,   46,   46,   46,   46,   46,   88, 1251,
     1251,   88,   88,  184,  184,  184, 1251,  184,  186, 1251,

      186,  186,  186,  189, 1251,  189,  189,  189,  199, 1251,
      199,  199,  199,    7, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251
    } ;

static const flex_int16_t yy_chk[8291] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    9,    9,   10,   10,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,   15,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   17,   17,   18,
       18,   21,   22,   21,   49,   49,   22,   23,   30,   21,
     1254,   21,   22, 1248,   23,   21,   21,   31, 1247,   44,

     1246,   23,   22,   24,   23, 1245,   27,   24,   21,   22,
       21,   24,   27,   22,   23,   30,   21,   24,   21,   22,
       24,   23,   21,   21,   31,   25,   44,   25,   23,   22,
       24,   23,   25,   27,   24,   29,   99,   25,   24,   27,
       55,   29,   29,   29,   24,   50,   50,   24,   29,   58,
       58,   55,   25,   28,   25, 1243,   32,   28, 1241,   25,
       32,   28,   29,   99,   25,   26,   32,   28,   29,   29,
       29,   86,   86,   26,  100,   29,   26,   34,   36,   26,
       28,  103,   26,   32,   28,   26,   33,   32,   28,   36,
       33,   34,   26,   32,   28,   36,   33,   34,   34,   35,

       26,  100, 1239,   26,   34,   36,   26,   35,  103,   26,
     1237,   35,   26,   33,   35, 1235,   36,   33,   34,   43,
       43,   42,   36,   33,   34,   34,   35,   38,   41,   42,
       41,   38,   70,   41,   35,  104,   70,   38,   35,  106,
     1233,   35,   70,  187,  187,  107,   43,   43,   42, 1190,
     1190, 1231,   70, 1229,   38,   41,   42,   41,   38,   70,
       41,  110,  104,   70,   38,   39,  106,   39,  102,   70,
       39,  102,  107,   39,   67,   39,   67,   39,   39,   70,
       67,   67, 1227,  101, 1225,   68,   67,   39,  110,   68,
     1223,  101,   39,   68,   39,  102, 1221,   39,  102,   68,

       39,   67,   39,   67,   39,   39,  116,   67,   67,   68,
      101,  112,   68,   67,   39,   40,   68,  109,  101,   40,
       68,  112,   40,   40,  109,  113,   68,  115,  115,   40,
      113,  117,   40,  116, 1218, 1215,   68, 1210,  112, 1205,
     1197, 1189,   40, 1172,  109, 1155,   40, 1117,  112,   40,
       40,  109,  113, 1079,  115,  115,   40,  113,  117,   40,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       57,   57,   57,   57,   57,   57,   57,   57,   57,   57,
       57,   61,   61,  118,   61,   61,   61,   61,   61,   61,
      105,  105,  119, 1013,  947,   71,  857,  120,  122,   71,

       61,   61,   61,   72,  105,   71,   61,   72,   61,  123,
      118,  124,  125,   72,   61,   71,   61,  105,  105,  119,
       61,   61,   71,   72,  120,  122,   71,  126,  127,  767,
       72,  105,   71,   61,   72,   61,  123,  648,  124,  125,
       72,   61,   71,   61,  128,  129,  529,   61,   61,  408,
       72,  286,  191,  189,  126,  127,   61,   62,   62,  131,
       62,   62,   62,   62,   62,   62,   90,  132,   77,   73,
       77,  128,  129,   73,   88,   77,   62,   62,   62,   73,
       77,   78,  133,   62,  135,   78,  131,   62,   85,   73,
       60,   78,   59,   62,  132,   77,   73,   77,   52,  136,

       73,   78,   77,   62,  138,   51,   73,   77,   78,  133,
       62,  135,   78,   47,   62,   81,   73,   81,   78,   81,
       62,   82,   81,   45,   20,   82,  136,   81,   78,   82,
       62,  138,   62,   63,   19,   82,  130,   63,  139,  130,
       63,   63,   81,  140,   81,   82,   81,   63,   82,   81,
       63,   84,   82,   11,   81,   84,   82,   63,    7,    4,
       63,   84,   82,  130,   63,  139,  130,   63,   63,    3,
      140,   84,   82,  141,   63,    0,   83,   63,   84,   83,
       83,  142,   84,  142,   63,   64,   83,  144,   84,   64,
      111,  111,  111,   64,  111,  145,   83,  146,   84,   64,

      141,  147,   64,   83,  149,    0,   83,   83,  142,   64,
      142,  150,   64,   83,  144,    0,   64,  111,  111,  111,
       64,  111,  145,   83,  146,  151,   64,    0,  147,   64,
        0,  149,  148,  153,    0,  148,   64,   65,  150,  154,
      143,   65,  143,  114,   65,  114,   65,   65,  114,    0,
      155,   65,  151,  143,  114,  156,   65,   65,    0,  148,
      153,  114,  148,    0,   65,    0,  154,  143,   65,  143,
      114,   65,  114,   65,   65,  114,  137,  155,   65,  159,
      143,  114,  156,   65,   65,   66,  137,  160,  114,   66,
      157,  137,  137,   66,  157,    0,   66,  161,  121,   66,

      121,  164,   66,  137,  121,   66,  159,    0,    0,   66,
        0,  121,   66,  137,  160,  121,   66,  157,  137,  137,
       66,  157,  158,   66,  161,  121,   66,  121,  164,   66,
      162,  121,   66,  165,  163,  158,   66,   69,  121,  162,
      158,  166,  121,   69,   69,   69,  167,  162,  163,  158,
       69,  168,  169,  171,  170,   69,    0,  162,  172,  173,
      165,  163,  158,    0,   69,  170,  162,  158,  166,  174,
       69,   69,   69,  167,  162,  163,    0,   69,  168,  169,
      171,  170,   69,   74,  176,  172,  173,   74,  177,  174,
      175,   74,  170,  175,  178,  180,  174,   74,  181,  179,

      178,  182,    0,   74,   74,  289,  291,   74,    0,  199,
       74,  176,  179,  199,   74,  177,  174,  175,   74,  199,
      175,  178,  180,    0,   74,  181,  179,  178,  182,  199,
       74,   74,  289,  291,   74,   75,  199,  292,  294,  179,
      199,   75,  296,   75,  297,  298,  199,   75,   75,  299,
       75,  300,  301,   75,    0,    0,  199,    0,    0,    0,
        0,    0,   75,    0,  292,  294,  303,    0,   75,  296,
       75,  297,  298,  304,   75,   75,  299,   75,  300,  301,
       75,   76,   91,   91,   91,   91,   91,   91,   91,   91,
       91,   91,   76,  303,   76,  305,  306,  307,   76,   76,

      304,    0,    0,  308,   76,    0,    0,    0,   76,   92,
       92,   92,   92,   92,   92,   92,   92,   92,   92,   76,
        0,   76,  305,  306,  307,   76,   76,    0,  200,  200,
      308,   76,   79,  200,   79,  309,  310,   79,   79,  200,
       79,  204,   79,  204,   79,   79,    0,  204,  204,  200,
        0,  311,  312,  204,   79,  200,  200,  313,    0,   79,
      200,   79,  309,  310,   79,   79,  200,   79,  204,   79,
      204,   79,   79,  201,  204,  204,  200,  201,  311,  312,
      204,   79,   80,  201,  313,  210,   80,  210,  201,   80,
       80,  314,  210,  201,  316,  317,   80,  210,  318,   80,

      201,  319,  320,  321,  201,  323,   80,    0,    0,   80,
      201,    0,  210,   80,  210,  201,   80,   80,  314,  210,
      201,  316,  317,   80,  210,  318,   80,    0,  319,  320,
      321,    0,  323,   80,   93,   93,   93,   93,   93,   93,
       93,   93,   93,   93,   93,  192,  192,  192,  192,  192,
      192,  192,  192,  192,  192,  193,  193,  193,  193,  193,
      193,  193,  193,  193,  193,  194,  194,  194,  194,  194,
      194,  194,  194,  194,  194,  194,  202,  208,  202,    0,
      324,  208,  325,  202,  202,  205,    0,  208,  202,    0,
      326,    0,    0,    0,  205,    0,  205,  208,    0,    0,

        0,  205,    0,  202,  208,  202,  205,  324,  208,  325,
      202,  202,  205,  207,  208,  202,  203,  326,  207,  203,
      207,  205,  209,  205,  208,  207,  209,  203,  205,  203,
      207,  327,  209,  205,  203,    0,  328,  329,    0,  203,
      207,    0,  209,  203,  330,  207,  203,  207,    0,  209,
        0,    0,  207,  209,  203,  315,  203,  207,  327,  209,
      302,  203,  302,  328,  329,  211,  203,  206,  206,  209,
      315,  330,  219,  206,  219,  206,  211,  302,  211,  219,
      206,  206,  315,  211,  219,  206,    0,  302,  211,  302,
        0,    0,  211,    0,  206,  206,    0,  315,    0,  219,

      206,  219,  206,  211,  302,  211,  219,  206,  206,  213,
      211,  219,  206,  213,    0,  211,  212,  212,  212,  213,
      212,  218,  214,  212,  331,  218,  214,  332,  212,  213,
      333,  218,  214,  334,  335,  336,  213,  214,  337,  338,
      213,  218,  214,  212,  212,  212,  213,  212,  218,  214,
      212,  331,  218,  214,  332,  212,  213,  333,  218,  214,
      334,  335,  336,    0,  214,  337,  338,  339,  218,  214,
      215,    0,  215,  340,    0,  215,  341,  342,  216,  343,
      216,  215,  344,  215,  216,  216,  345,    0,  215,  217,
      216,  217,  346,  215,  339,    0,  217,  215,  217,  215,

      340,  217,  215,  341,  342,  216,  343,  216,  215,  344,
      215,  216,  216,  345,  220,  215,  217,  216,  217,  346,
      215,  221,  220,  217,  220,  217,  347,  348,  217,  220,
      221,  349,  221,  351,  220,  352,  347,  221,  353,    0,
      354,  220,  221,    0,    0,    0,    0,  356,  221,  220,
        0,  220,    0,  347,  348,    0,  220,  221,  349,  221,
      351,  220,  352,  347,  221,  353,  223,  354,  223,  221,
      222,  225,  222,  223,  356,  225,  222,  224,  223,  224,
      357,  225,  222,  222,  224,  358,    0,  222,  359,  224,
        0,  225,  222,  223,    0,  223,    0,  222,  225,  222,

      223,  360,  225,  222,  224,  223,  224,  357,  225,  222,
      222,  224,  358,  226,  222,  359,  224,  226,  225,  222,
      228,  227,  228,  226,  362,  227,  226,  228,  360,  363,
        0,  227,  228,  226,    0,  229,    0,  364,    0,  229,
      226,  227,    0,    0,  226,  229,    0,  228,  227,  228,
      226,  362,  227,  226,  228,  229,  363,  230,  227,  228,
      226,  230,  229,  231,  364,  231,  229,  230,  227,  232,
      231,  232,  229,  231,    0,  231,  232,  230,    0,    0,
        0,  232,  229,  365,  230,    0,    0,    0,  230,  366,
      231,  367,  231,    0,  230,  368,  232,  231,  232,  233,

      231,  233,  231,  232,  230,  234,  233,  234,  232,  369,
      365,  233,  234,  235,  234,  235,  366,  234,  367,    0,
      235,  370,  368,    0,    0,  235,  233,  355,  233,    0,
        0,    0,  234,  233,  234,  371,  369,  355,  233,  234,
      235,  234,  235,  372,  234,  236,  237,  235,  370,  236,
      237,  239,  235,  239,  355,  236,  237,  237,  239,  373,
      374,  375,  371,  239,  355,  236,  237,    0,    0,    0,
      372,  376,  236,  237,    0,    0,  236,  237,  239,    0,
      239,  377,  236,  237,  237,  239,  373,  374,  375,    0,
      239,  240,  236,  237,  238,  240,  241,  378,  376,  379,

      241,  240,  238,  381,  238,  382,  241,  383,  377,  238,
      238,  240,  384,  245,  238,  245,  241,    0,  240,  245,
      245,  238,  240,  241,  378,  245,  379,  241,  240,  238,
      381,  238,  382,  241,  383,    0,  238,  238,  240,  384,
      245,  238,  245,  241,  242,  242,  245,  245,  242,  246,
      385,  246,  245,  386,  242,  247,  246,  247,  387,  388,
      389,  246,  247,  390,  242,    0,  391,  247,  392,    0,
        0,  242,  242,    0,  394,  242,  246,  385,  246,  397,
      386,  242,  247,  246,  247,  387,  388,  389,  246,  247,
      390,  242,  243,  391,  247,  392,  243,  248,  243,  248,

      243,  394,  243,  398,  248,  248,  397,  399,  395,  248,
      400,  401,  243,    0,    0,    0,    0,  395,    0,  243,
        0,    0,    0,  243,  248,  243,  248,  243,    0,  243,
      398,  248,  248,  402,  399,  395,  248,  400,  401,  243,
      244,  252,  244,  250,  395,  250,  396,  252,  396,  252,
      250,  244,  403,  244,  252,  250,    0,  404,  244,  252,
      402,  404,  405,  244,    0,  406,    0,  244,  252,  244,
      250,    0,  250,  396,  252,  396,  252,  250,  244,  403,
      244,  252,  250,  251,  404,  244,  252,  530,  404,  405,
      244,  249,  406,  249,  251,  531,  251,  532,  249,  249,

        0,  251,  249,  249,  533,  253,  251,  253,    0,  534,
      251,    0,  253,    0,  530,    0,  535,  253,  249,    0,
      249,  251,  531,  251,  532,  249,  249,  254,  251,  249,
      249,  533,  253,  251,  253,  254,  534,  254,  255,  253,
      255,    0,  254,  535,  253,  255,  255,  254,    0,  256,
      255,  256,  536,    0,  254,  256,  256,  257,    0,  537,
        0,  256,  254,  538,  254,  255,  540,  255,  257,  254,
      257,    0,  255,  255,  254,  257,  256,  255,  256,  536,
      257,  258,  256,  256,  257,  258,  537,  259,  256,    0,
      538,  258,    0,  540,  543,  257,  544,  257,  259,  260,

      259,  258,  257,  545,  260,  259,  260,  257,  258,    0,
      259,  260,  258,    0,  259,    0,  260,  261,  258,  261,
        0,  543,    0,  544,  261,  259,  260,  259,  258,  261,
      545,  260,  259,  260,  546,  548,  262,  259,  260,  549,
      262,  264,  262,  260,  261,  264,  261,  262,  550,  264,
        0,  261,  262,    0,  552,  264,  261,  553,  554,  555,
      556,  546,  548,  262,    0,  264,  549,  262,  264,  262,
        0,  557,  264,  265,  262,  550,  264,  265,  558,  262,
      263,  552,  264,  265,  553,  554,  555,  556,  559,  263,
      560,  263,  264,  265,    0,  266,  263,  263,  557,  266,

      265,  263,    0,  266,  265,  558,    0,  263,  563,  266,
      265,    0,  564,    0,    0,  559,  263,  560,  263,  266,
      265,  267,  266,  263,  263,  267,  266,    0,  263,  268,
      266,  267,  270,  268,  267,  563,  266,  268,  269,  564,
      269,  267,  270,  268,  270,  269,  266,  565,  267,  270,
      269,  566,  267,  268,  270,    0,  268,    0,  267,  270,
      268,  267,    0,  567,  268,  269,    0,  269,  267,  270,
      268,  270,  269,  568,  565,  272,  270,  269,  566,  272,
      268,  270,  271,  271,  271,  272,    0,  569,  273,  271,
      567,  571,  273,  274,  271,  272,  273,  274,  273,  572,

      568,  575,  272,  274,  274,    0,  272,  576,  273,  271,
      271,  271,  272,  274,  569,  273,  271,    0,  571,  273,
      274,  271,  272,  273,  274,  273,  572,    0,  575,  578,
      274,  274,  276,  581,  576,  273,  276,    0,    0,  276,
      274,  275,  276,  277,  277,  275,  582,  278,  277,  275,
      583,  278,  276,  584,  277,  275,  578,  278,    0,  276,
      581,  275,    0,  276,  277,  275,  276,  278,  275,  276,
      277,  277,  275,  582,  278,  277,  275,  583,  278,  276,
      584,  277,  275,  279,  278,  279,    0,  585,  275,  279,
      279,  277,  275,  280,  278,  279,  586,  280,  281,    0,

      589,  593,  281,  280,    0,  595,  280,  596,  281,  598,
      279,  282,  279,  280,  585,  282,  279,  279,  281,    0,
      280,  282,  279,  586,  280,  281,  282,  589,  593,  281,
      280,  282,  595,  280,  596,  281,  598,    0,  282,    0,
      280,  600,  282,  283,  587,  281,  410,  283,  282,  601,
      410,  283,  414,  282,  414,  587,  410,  283,  282,  414,
      599,  599,  602,  604,  414,  605,  410,  283,  600,    0,
      283,  587,    0,  410,  283,    0,  601,  410,  283,  414,
        0,  414,  587,  410,  283,    0,  414,  599,  599,  602,
      604,  414,  605,  410,  283,  287,  287,  287,  287,  287,

      287,  287,  287,  287,  287,  409,  409,  409,  409,  409,
      409,  409,  409,  409,  409,  411,  412,  413,    0,  411,
      412,  413,  415,    0,  415,  411,  412,  413,    0,  415,
      606,  607,  608,  610,  415,  411,  412,  413,  417,    0,
      417,    0,  411,  412,  413,  417,  411,  412,  413,  415,
      417,  415,  411,  412,  413,  416,  415,  606,  607,  608,
      610,  415,  411,  412,  413,  417,  416,  417,  416,  611,
      418,  419,  417,  416,  418,  419,  613,  417,  416,    0,
      418,  419,  416,    0,  421,  614,  615,  616,  421,    0,
      418,  419,  617,  416,  421,  416,  611,  418,  419,    0,

      416,  418,  419,  613,  421,  416,  420,  418,  419,  618,
      420,  421,  614,  615,  616,  421,  420,  418,  419,  617,
      422,  421,  422,  423,  420,  423,  420,  422,  619,    0,
      423,  421,  422,  420,  620,  423,  618,  420,    0,    0,
      623,    0,    0,  420,  624,    0,  625,  422,    0,  422,
      423,  420,  423,  420,  422,  619,  426,  423,    0,  422,
      426,  620,  423,  424,  425,  424,  426,  623,  425,  424,
      627,  624,  426,  625,  425,  424,  426,  425,  427,    0,
      424,  628,  427,  426,  425,  424,  427,  426,  427,    0,
      424,  425,  424,  426,    0,  425,  424,  627,  427,  426,

      631,  425,  424,  426,  425,  427,  428,  424,  628,  427,
      428,  425,  424,  427,  429,  427,  428,  632,  429,  432,
      634,  428,  635,  432,  429,  427,  428,  631,  430,  432,
      636,    0,  430,  428,  429,  637,  430,  428,    0,  432,
      638,  429,  430,  428,  632,  429,  432,  634,  428,  635,
      432,  429,  430,  428,    0,  430,  432,  636,  431,  430,
      431,  429,  637,  430,  639,  431,  432,  638,  640,  430,
      431,  433,  641,  433,  434,  643,  434,    0,  433,  430,
      645,  434,  647,  433,  435,  431,  434,  431,  435,    0,
      770,  639,  431,    0,  435,  640,  772,  431,  433,  641,

      433,  434,  643,  434,  435,  433,  774,  645,  434,  647,
      433,  435,  436,  434,  437,  435,  436,  770,  437,    0,
      436,  435,  775,  772,  437,    0,  436,  776,  777,  437,
      778,  435,  779,  774,  437,    0,  436,  780,  438,  436,
      438,  437,  439,  436,  438,  437,  439,  436,    0,  775,
      438,  437,  439,  436,  776,  777,  437,  778,  781,  779,
      438,  437,  439,  436,  780,  438,  440,  438,  782,  439,
      440,  438,  784,  439,  785,  441,  440,  438,  441,  439,
      442,  440,  441,    0,  442,  781,  440,  438,  441,  439,
      442,  442,    0,  440,  786,  782,    0,  440,  441,  784,

      442,  785,  441,  440,  787,  441,  443,  442,  440,  441,
      443,  442,    0,  440,  788,  441,  443,  442,  442,  444,
      445,  786,  790,  444,  445,  441,  443,  442,  445,  444,
      791,  787,  446,  443,  445,  792,  446,  443,    0,  444,
        0,  788,  446,  443,  445,    0,  444,  445,  793,  790,
      444,  445,  446,  443,    0,  445,  444,  791,  447,  446,
      447,  445,  792,  446,  447,  448,  444,  448,    0,  446,
      447,  445,  448,    0,  449,  793,  449,  448,    0,  446,
      447,  449,    0,  794,    0,  447,  449,  447,    0,    0,
      795,  447,  448,  451,  448,  451,  796,  447,    0,  448,

      451,  449,    0,  449,  448,  451,    0,  447,  449,  450,
      794,  450,    0,  449,  452,  450,  450,  795,  452,  797,
      451,  450,  451,  796,  452,  453,  798,  451,    0,  453,
      799,    0,  451,  453,  452,    0,  450,    0,  450,  453,
      802,  452,  450,  450,    0,  452,  797,    0,  450,  453,
      803,  452,  453,  798,  454,  455,  453,  799,  454,  455,
      453,  452,  454,  455,  454,  455,  453,  802,  805,  808,
        0,  456,    0,  456,  454,  455,  453,  803,  456,    0,
      811,  454,  455,  456,  812,  454,  455,  457,    0,  454,
      455,  454,  455,    0,  814,  805,  808,  457,  456,  457,

      456,  454,  455,  817,  457,  456,  458,  811,  458,  457,
      456,  812,    0,  458,  457,  458,  459,  820,  458,  460,
      459,  814,  459,  460,  457,    0,  457,  459,    0,  460,
      817,  457,  459,  458,    0,  458,  457,    0,  821,  460,
      458,    0,  458,  459,  820,  458,  460,  459,  462,  459,
      460,  461,  462,    0,  459,  461,  460,  822,  462,  459,
      463,  461,  461,  462,  463,  821,  460,  823,  462,  824,
      463,  461,    0,  463,  825,  462,    0,    0,  461,  462,
      463,    0,  461,  828,  822,  462,    0,  463,  461,  461,
      462,  463,    0,  829,  823,  462,  824,  463,  461,  464,

      463,  825,  465,  464,  466,  464,  465,  463,  466,  464,
      828,  471,  465,  471,  466,  830,    0,  467,  471,  464,
      829,  467,  465,  471,  466,    0,  464,  467,    0,  465,
      464,  466,  464,  465,    0,  466,  464,  467,  471,  465,
      471,  466,  830,  468,  467,  471,  464,  468,  467,  465,
      471,  466,  469,  468,  467,  470,  469,  474,  831,  470,
        0,  474,  469,  468,  467,  470,  472,  474,  472,  832,
      468,  470,  469,  472,  468,  470,    0,  474,  472,  469,
      468,    0,  470,  469,  474,  831,  470,  475,  474,  469,
      468,  475,  470,  472,  474,  472,  832,  475,  470,  469,

      472,  473,  470,  473,  474,  472,    0,  475,  473,  473,
      476,  476,  834,  473,  475,  476,    0,  835,  475,  836,
        0,  476,    0,  478,  475,  478,  813,  478,  473,  813,
      473,  476,    0,  478,  475,  473,  473,  476,  476,  834,
      473,  837,  476,  478,  835,  479,  836,  479,  476,  479,
      478,  839,  478,  813,  478,  479,  813,  840,  476,  477,
      478,  841,    0,  477,    0,  479,    0,  477,  837,  477,
      478,  480,  479,  477,  479,  480,  479,    0,  839,  842,
        0,  480,  479,  477,  840,  843,  477,  480,  841,  481,
      477,  480,  479,  481,  477,  844,  477,  482,  480,  481,

      477,  482,  480,  845,  481,  846,  842,  482,  480,  481,
      477,  848,  843,  482,  480,  483,  481,  482,  480,  483,
      481,  849,  844,  850,  482,  483,  481,    0,  482,  484,
      845,  481,  846,  484,  482,  483,  481,  484,  848,  852,
      482,    0,  483,  484,  482,  853,  483,  485,  849,  485,
      850,  854,  483,  484,  485,    0,  484,  948,  950,  485,
      484,  486,  483,  486,  484,  952,  852,  486,  486,  953,
      484,  954,  853,  486,  485,  487,  485,  487,  854,  488,
      484,  485,  487,  488,  948,  950,  485,  487,  486,  488,
      486,  955,  952,  489,  486,  486,  953,  489,  954,  488,

      486,  957,  487,  489,  487,    0,  488,  490,  959,  487,
      488,  490,    0,  489,  487,  490,  488,  960,  955,    0,
      489,  490,  961,  962,  489,  491,  488,  491,  957,    0,
      489,  490,  491,  964,  490,  959,  966,  491,  490,  492,
      489,  492,  490,  492,  960,  970,  492,    0,  490,  961,
      962,  492,  491,  972,  491,  493,  493,  493,  490,  491,
      964,  973,  493,  966,  491,    0,  492,  493,  492,  494,
      492,  494,  970,  492,  495,  979,  494,  980,  492,  981,
      972,  494,  493,  493,  493,  495,    0,  495,  973,  493,
        0,  984,  495,    0,  493,  986,  494,  495,  494,  988,

        0,  495,  979,  494,  980,  990,  981,    0,  494,  496,
      991,  496,  495,  498,  495,  498,  496,  496,  984,  495,
      498,  496,  986,  497,  495,  498,  988,  497,    0,  497,
        0,  499,  990,  992,  497,  499,  496,  991,  496,  497,
      498,  499,  498,  496,  496,  500,    0,  498,  496,  500,
      497,  499,  498,  501,  497,  500,  497,  501,  499,  994,
      992,  497,  499,  501,  995,  500,  497,  502,  499,  996,
      997,  502,  500,  501,  999,  503,  500,  502,  499,  503,
      501, 1001,  500, 1003,  501,  503,  994,  502,  503,  504,
      501,  995,  500,  504,  502,  503,  996,  997,  502,  504,

      501,  999,  503, 1004,  502,    0,  503,  504, 1001,  504,
     1003, 1005,  503,  505,  502,  503,  504,  505, 1006, 1011,
      504,    0,  503,  505,  505,  506,  504,  506,    0, 1012,
     1004, 1084,  506,  505,  504,    0,  504,  506, 1005, 1087,
      505,  507, 1088,  507,  505, 1006, 1011, 1091,  507,  507,
      505,  505,  506,  507,  506,  508, 1012,  508, 1084,  506,
      505,    0,  508,  508,  506,    0, 1087,  508,  507, 1088,
      507, 1092,  509, 1097, 1091,  507,  507, 1098, 1101, 1102,
      507,  509,  508,  509,  508,  510,    0,  510,  509,  508,
      508, 1105,  510,  509,  508,    0,    0,  510, 1092,  509,

     1097, 1106,    0,    0, 1098, 1101, 1102,    0,  509,  511,
      509,  511,  510,  511,  510,  509,  511, 1109, 1105,  510,
      509,  511,  514,  512,  510,  512,  514,  513, 1106,  513,
      512,  512,  514,    0,  513,  512,  511,    0,  511,  513,
      511, 1111,  514,  511, 1109,    0, 1112,    0,  511,  514,
      512, 1113,  512,  514,  513, 1114,  513,  512,  512,  514,
      515,  513,  512,    0,  515,  516,  513,  516, 1111,  514,
      515,    0,  516, 1112,  517, 1156, 1158,  516, 1113,    0,
      515,  517, 1114,  517, 1161,  519,  518,  515,  517,  519,
      518,  515,  516,  517,  516,  519,  518,  515,  518,  516,

     1164,  517, 1156, 1158,  516,  519,  518,  515,  517,    0,
      517, 1161,  519,  518,    0,  517,  519,  518, 1168, 1169,
      517, 1170,  519,  518, 1191,  518,  520, 1164, 1193,  521,
      520,  521,  519,  518,  520,  522,  521,  522, 1196, 1209,
      520,  521,  522,    0,  522, 1168, 1169,  522, 1170,    0,
      520, 1191,    0,  520,    0, 1193,  521,  520,  521, 1206,
     1206,  520,  522,  521,  522, 1196, 1209,  520,  521,  522,
      523,  522,    0,  524,  522,  524,  526,  520,  526,  523,
      524,  523,  526,  526,  524,  524,  523,  525,  526,  525,
     1216,  523,    0, 1219,  525,  525,    0,  523,    0,  525,

      524, 1206,  524,  526, 1222,  526,  523,  524,  523,  526,
      526,  524,  524,  523,  525,  526,  525, 1216,  523,  527,
     1219,  525,  525,  527, 1224,  527,  525,  528, 1206,  528,
      527, 1222, 1226,  528,  528,  527,  649,    0,  649,  528,
     1228,    0,  649,  649, 1211, 1211,  527,    0,  649,    0,
      527, 1224,  527, 1230,  528,    0,  528,  527, 1232, 1226,
      528,  528,  527,  649,  651,  649,  528, 1228,  651,  649,
      649,  650,  652,  650,  651,  649,  652,  650,  650,    0,
     1230, 1234,  652,  650,  651, 1232, 1211,    0,    0,    0,
     1236,  651,  652,    0,    0,  651, 1238,    0,  650,  652,

      650,  651,  653,  652,  650,  650,  653, 1240, 1234,  652,
      650,  651,  653, 1211,  654,  653,  654, 1236,    0,  652,
      655,  654,  653, 1238,  655,  656,  654,  656,    0,  653,
      655,    0,  656,  653, 1240,    0,    0,  656,    0,  653,
      655,  654,  653,  654,    0,    0,  657,  655,  654,  653,
      657,  655,  656,  654,  656,    0,  657,  655,  658,  656,
        0,  660,  658,    0,  656,  660,  657,  655,  658,    0,
        0,  660,  659,  657,    0,    0,  659,  657,  658,    0,
      659,  660,    0,  657,    0,  658,  659,    0,  660,  658,
      661,    0,  660,  657,  661,  658,  659,    0,  660,  659,

      661,    0,    0,  659,    0,  658,    0,  659,  660,    0,
      661,  662,  663,  659,  664,  662,  663,  661,  664,  662,
      663,  661,  663,  659,  664,  662,    0,  661,    0,    0,
        0,    0,  663,    0,  664,  662,    0,  661,  662,  663,
      665,  664,  662,  663,  665,  664,  662,  663,    0,  663,
      665,  664,  662,  665,  666,    0,    0,    0,  666,  663,
      665,  664,  662,  668,  666,  668,    0,  665,  667,    0,
      668,  665,  667,    0,  666,  668,    0,  665,  667,    0,
      665,  666,  670,  667,  670,  666,    0,  665,  667,  670,
      668,  666,  668,    0,  670,  667,  669,  668,  669,  667,

        0,  666,  668,  669,  669,  667,    0,    0,  669,  670,
      667,  670,  671,    0,  671,  667,  670,    0,    0,  671,
        0,  670,    0,  669,  671,  669,  672,  672,  672,    0,
      669,  669,    0,  672,    0,  669,    0,    0,  672,  671,
      673,  671,  673,    0,    0,    0,  671,  673,  675,  673,
        0,  671,  673,  672,  672,  672,  674,    0,  674,  675,
      672,  675,    0,  674,  674,  672,  675,  673,  674,  673,
        0,  675,    0,    0,  673,  675,  673,    0,    0,  673,
        0,    0,    0,  674,    0,  674,  675,    0,  675,    0,
      674,  674,    0,  675,  676,  674,  676,    0,  675,  677,

      676,  676,    0,    0,    0,  679,  676,  679,  677,  678,
      677,    0,  679,  678,    0,  677,    0,  679,    0,  678,
      677,  676,    0,  676,    0,    0,  677,  676,  676,  678,
        0,    0,  679,  676,  679,  677,  678,  677,    0,  679,
      678,  680,  677,  680,  679,    0,  678,  677,  680,    0,
      681,    0,  681,  680,  688,    0,  678,  681,  688,  682,
        0,  682,  681,  682,  688,    0,  682,    0,  680,    0,
      680,  682,    0,    0,  688,  680,    0,  681,    0,  681,
      680,  688,    0,    0,  681,  688,  682,    0,  682,  681,
      682,  688,  683,  682,  683,  686,  683,    0,  682,  683,

      684,  688,  684,  685,  683,  685,  686,  684,  686,  684,
      685,  685,  684,  686,    0,  685,    0,    0,  686,  683,
        0,  683,  686,  683,    0,    0,  683,  684,    0,  684,
      685,  683,  685,  686,  684,  686,  684,  685,  685,  684,
      686,  687,  685,  689,    0,  686,  690,  689,    0,    0,
      690,    0,  687,  689,  687,    0,  690,    0,    0,  687,
        0,  690,    0,  689,  687,    0,  690,    0,  687,    0,
      689,    0,    0,  690,  689,    0,    0,  690,    0,  687,
      689,  687,    0,  690,    0,    0,  687,    0,  690,    0,
      689,  687,  691,  690,  692,  693,  691,    0,  692,  693,

      691,    0,    0,    0,  692,  693,  691,    0,    0,    0,
        0,    0,    0,    0,  692,  693,  691,    0,    0,  691,
      694,  692,  693,  691,  694,  692,  693,  691,  694,    0,
        0,  692,  693,  691,  694,    0,    0,    0,    0,    0,
        0,  692,  693,  691,  694,    0,  695,  694,  696,    0,
      695,  694,  696,    0,    0,  694,  695,  695,  696,    0,
      697,  694,  697,    0,    0,    0,  695,  697,  696,    0,
        0,  694,  697,  695,  698,  696,  698,  695,    0,  696,
        0,  698,    0,  695,  695,  696,  698,  697,    0,  697,
      699,    0,  699,  695,  697,  696,    0,  699,  700,  697,

      700,  698,  699,  698,    0,  700,    0,    0,  698,    0,
      700,  701,    0,  698,    0,  701,  703,  699,  703,  699,
        0,  701,    0,  703,  699,  700,  702,  700,  703,  699,
      702,  701,  700,    0,    0,    0,  702,  700,  701,  702,
        0,    0,  701,  703,    0,  703,  702,    0,  701,  707,
      703,  707,    0,  702,    0,  703,  707,  702,  701,    0,
        0,  707,  704,  702,  704,  705,  702,  705,  704,  704,
        0,  705,  705,  702,  704,    0,  707,  705,  707,    0,
        0,    0,    0,  707,    0,    0,    0,    0,  707,  704,
        0,  704,  705,    0,  705,  704,  704,    0,  705,  705,

        0,  704,    0,    0,  705,  706,  708,  709,  708,  709,
      706,    0,  706,  708,  709,    0,  706,  706,  708,  709,
        0,    0,  706,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  706,  708,  709,  708,  709,  706,    0,  706,
      708,  709,    0,  706,  706,  708,  709,    0,  710,  706,
      710,  711,    0,  711,  712,  710,  712,  713,  711,  713,
      710,  712,  712,  711,  713,    0,  712,    0,    0,  713,
        0,    0,    0,    0,    0,  710,    0,  710,  711,    0,
      711,  712,  710,  712,  713,  711,  713,  710,  712,  712,
      711,  713,  714,  712,  714,    0,  713,  715,  716,  714,

        0,  715,  716,    0,  714,    0,    0,  715,  716,    0,
      717,    0,    0,    0,  717,    0,    0,  715,  716,  714,
      717,  714,    0,    0,  715,  716,  714,    0,  715,  716,
      717,  714,    0,    0,  715,  716,    0,  717,    0,    0,
        0,  717,    0,    0,  715,  716,  718,  717,  718,    0,
        0,    0,    0,  718,  718,  719,    0,  717,  718,  719,
        0,  719,  720,    0,  720,    0,  719,    0,  720,  720,
        0,  719,    0,  718,  720,  718,    0,    0,    0,    0,
      718,  718,  719,    0,    0,  718,  719,    0,  719,  720,
      721,  720,    0,  719,  721,  720,  720,    0,  719,  722,

      721,  720,  723,  722,  723,    0,    0,    0,  723,  722,
      721,    0,  724,    0,  723,    0,  724,  721,    0,  722,
        0,  721,  724,    0,  723,    0,  722,  721,    0,  723,
      722,  723,  724,    0,  725,  723,  722,  721,  725,  724,
        0,  723,    0,  724,  725,    0,  722,  725,  727,  724,
        0,  723,  727,  726,  725,    0,  727,  726,  727,  724,
        0,  725,    0,  726,    0,  725,  726,    0,  727,    0,
        0,  725,  728,  726,  725,  727,  728,    0,    0,  727,
      726,  725,  728,  727,  726,  727,    0,    0,    0,    0,
      726,    0,  728,  726,  729,  727,    0,  731,  729,  728,

      726,  731,  729,  728,    0,    0,  730,  731,  729,  728,
      730,    0,    0,    0,  730,    0,    0,  731,  729,  728,
      730,  729,    0,    0,  731,  729,    0,    0,  731,  729,
      730,    0,  732,  730,  731,  729,  732,  730,    0,    0,
      732,  730,  732,    0,  731,  729,    0,  730,    0,    0,
      734,  733,  732,    0,  734,  733,    0,  730,    0,  732,
      734,  733,    0,  732,  733,  734,    0,  732,    0,  732,
      734,  733,    0,  735,    0,    0,  735,  734,  733,  732,
      735,  734,  733,    0,    0,  736,  735,  734,  733,  736,
        0,  733,  734,  736,    0,  736,  735,  734,  733,  737,

      735,  737,    0,  735,    0,  736,  737,  735,  738,    0,
        0,  737,  736,  735,    0,    0,  736,  738,    0,  738,
      736,  739,  736,  735,  738,  739,  737,    0,  737,  738,
      740,  739,  736,  737,  740,  738,    0,    0,  737,  741,
      740,  739,    0,  741,  738,    0,  738,    0,  739,  741,
      740,  738,  739,  742,    0,  742,  738,  740,  739,  741,
      742,  740,    0,    0,    0,  742,  741,  740,  739,  743,
      741,  744,    0,  743,  745,  744,  741,  740,  745,  743,
      742,  744,  742,  750,  745,  750,  741,  742,    0,  743,
      750,  744,  742,  746,  745,  750,  743,  746,  744,    0,

      743,  745,  744,  746,    0,  745,  743,    0,  744,    0,
      750,  745,  750,  746,    0,  747,  743,  750,  744,  747,
      746,  745,  750,  748,  746,  747,    0,  748,  749,  751,
      746,  751,  749,  748,    0,  747,  751,  752,  749,  752,
      746,  751,  747,  748,  752,    0,  747,    0,  749,  752,
      748,    0,  747,    0,  748,  749,  751,    0,  751,  749,
      748,    0,  747,  751,  752,  749,  752,    0,  751,  753,
      748,  752,  754,    0,  754,  749,  752,    0,  753,  754,
      753,    0,    0,    0,  754,  753,  755,    0,  755,    0,
      753,  756,    0,  755,    0,  755,  753,    0,  755,  754,

        0,  754,  756,    0,  756,  753,  754,  753,    0,  756,
        0,  754,  753,  755,  756,  755,    0,  753,  756,    0,
      755,    0,  755,    0,    0,  755,  757,    0,  757,  756,
      758,  756,    0,  757,  757,  758,  756,  758,  757,  759,
        0,  756,  758,  759,    0,    0,    0,  758,  760,  759,
        0,  760,  760,  757,    0,  757,    0,  758,  760,  759,
      757,  757,  758,  761,  758,  757,  759,  761,  760,  758,
      759,    0,    0,  761,  758,  760,  759,  762,  760,  760,
        0,  762,    0,  761,    0,  760,  759,  762,    0,    0,
      761,    0,  763,  762,  761,  760,  763,  762,    0,    0,

      761,  764,  763,    0,  762,  764,    0,    0,  762,    0,
      761,  764,  763,    0,  762,  766,    0,  766,    0,  763,
      762,  764,  766,  763,  762,    0,  765,  766,  764,  763,
      765,    0,  764,  858,    0,  858,  765,    0,  764,  763,
      858,    0,  766,    0,  766,  858,  765,    0,  764,  766,
        0,    0,    0,  765,  766,    0,    0,  765,    0,  859,
      858,  859,  858,  765,    0,    0,  859,  858,  860,    0,
      860,  859,  858,  765,    0,  860,    0,  861,    0,  861,
      860,  862,  860,    0,  861,  862,  859,    0,  859,  861,
      863,  862,    0,  859,  863,  860,    0,  860,  859,    0,

      863,  862,  860,    0,  861,    0,  861,  860,  862,  860,
      863,  861,  862,    0,    0,  864,  861,  863,  862,  864,
        0,  863,    0,    0,    0,  864,  866,  863,  862,  865,
      866,    0,    0,  865,  866,  864,    0,  863,    0,  865,
      866,    0,  864,    0,  865,    0,  864,    0,    0,  865,
      866,    0,  864,  866,  867,  867,  865,  866,    0,  867,
      865,  866,  864,    0,    0,  867,  865,  866,  868,    0,
      868,  865,    0,    0,  868,  867,  865,  866,    0,    0,
      868,  867,  867,    0,    0,    0,  867,  869,    0,  869,
      868,    0,  867,    0,  869,  868,  870,  868,  870,  869,

        0,  868,  867,  870,  870,    0,    0,  868,  870,  871,
        0,    0,    0,  871,  869,    0,  869,  868,  872,  871,
        0,  869,  872,  870,    0,  870,  869,    0,  872,  871,
      870,  870,  877,  873,  877,  870,  871,  873,  872,  877,
      871,    0,    0,  873,  877,  872,  871,  874,  875,  872,
        0,  874,  875,  873,    0,  872,  871,  874,  875,  877,
      873,  877,    0,    0,  873,  872,  877,  874,  875,  876,
      873,  877,  878,  876,  874,  875,  878,  876,  874,  875,
      873,    0,  878,  876,  874,  875,    0,  879,    0,    0,
        0,  879,  878,  876,  874,  875,  876,  879,    0,  878,

      876,  880,  881,  878,  876,  880,  881,  879,    0,  878,
      876,  880,  881,    0,  879,    0,    0,  881,  879,  878,
      876,  880,  881,  882,  879,  882,    0,  883,  880,  881,
      882,  883,  880,  881,  879,  882,  884,  883,  880,  881,
      884,    0,    0,    0,  881,    0,  884,  883,  880,  881,
      882,  885,  882,    0,  883,  885,  884,  882,  883,    0,
        0,  885,  882,  884,  883,  886,  885,  884,    0,  886,
        0,  885,    0,  884,  883,  886,    0,  887,  885,  887,
      886,    0,  885,  884,  887,  886,    0,    0,  885,  887,
      888,    0,  886,  885,  888,    0,  886,  889,  885,  889,

      888,    0,  886,  889,  887,    0,  887,  886,    0,  889,
      888,  887,  886,  893,    0,  893,  887,  888,  890,  889,
      893,  888,  890,    0,  889,  893,  889,  888,  890,    0,
      889,  891,    0,    0,    0,  891,  889,  888,  890,    0,
      893,  891,  893,    0,  892,  890,  889,  893,  892,  890,
        0,  891,  893,    0,  892,  890,    0,    0,  891,  892,
        0,    0,  891,    0,  892,  890,    0,  894,  891,  894,
        0,  892,    0,    0,  894,  892,    0,    0,  891,  894,
      895,  892,    0,    0,    0,  895,  892,  895,  896,    0,
      896,  892,  895,    0,  894,  896,  894,  895,    0,    0,

      896,  894,    0,    0,    0,    0,  894,  895,    0,  897,
        0,  897,  895,    0,  895,  896,  897,  896,  898,  895,
      898,  897,  896,    0,  895,  898,  898,  896,    0,    0,
      898,    0,  899,    0,  899,    0,  897,    0,  897,  899,
        0,    0,    0,  897,  899,  898,    0,  898,  897,    0,
        0,    0,  898,  898,    0,    0,  900,  898,  900,  899,
        0,  899,  901,  900,  901,    0,  899,    0,  900,  901,
      901,  899,  902,    0,  901,    0,  902,    0,    0,    0,
        0,    0,  902,  900,    0,  900,    0,    0,    0,  901,
      900,  901,  902,    0,    0,  900,  901,  901,  903,  902,

      903,  901,    0,  902,  904,  903,  904,    0,  903,  902,
      903,  904,    0,    0,    0,    0,  904,    0,    0,  902,
        0,    0,  905,    0,  905,  903,    0,  903,    0,  905,
        0,  904,  903,  904,  905,  903,    0,  903,  904,    0,
      906,    0,  906,  904,    0,  907,    0,  906,    0,  905,
        0,  905,  906,  907,    0,  907,  905,    0,    0,    0,
      907,  905,    0,    0,  908,  907,  908,  906,    0,  906,
        0,  908,  907,    0,  906,    0,  908,    0,    0,  906,
      907,    0,  907,  909,  910,  909,    0,  907,  910,    0,
      909,  908,  907,  908,  910,  909,  912,    0,  908,    0,

        0,    0,    0,  908,  910,    0,  911,  912,  911,  912,
      909,  910,  909,  911,  912,  910,    0,  909,  911,  912,
        0,  910,  909,  912,    0,    0,    0,    0,    0,    0,
      913,  910,  913,  911,  912,  911,  912,  913,  913,    0,
      911,  912,  913,    0,  914,  911,  912,    0,  914,    0,
      914,  916,    0,  916,  915,  914,  915,  913,  916,  913,
      914,  915,  915,  916,  913,  913,  915,    0,    0,  913,
        0,  914,  917,    0,  917,  914,    0,  914,  916,  917,
      916,  915,  914,  915,  917,  916,    0,  914,  915,  915,
      916,    0,  918,  915,  919,    0,  918,    0,  919,  917,

        0,  917,  918,    0,  919,    0,  917,  919,    0,    0,
        0,  917,  918,    0,  919,    0,    0,    0,  921,  918,
      920,  919,  921,  918,  920,  919,    0,    0,  921,  918,
      920,  919,  922,  920,  919,    0,  922,    0,  921,  918,
      920,  919,  922,    0,  923,  921,    0,  920,  923,  921,
        0,  920,  922,    0,  923,  921,    0,  920,  924,  922,
      920,    0,  924,  922,  923,  921,  924,  920,    0,  922,
      925,  923,  924,    0,  925,  923,  928,    0,  925,  922,
      928,  923,  924,    0,  925,  924,  928,  926,  926,  924,
        0,  923,  926,  924,  925,    0,  928,  925,  926,  924,

      929,  925,  927,  928,  929,  925,  927,  928,  926,  924,
      929,  925,  927,  928,  926,  926,    0,  927,    0,  926,
      929,  925,  927,  928,    0,  926,    0,  929,  931,  927,
        0,  929,  931,  927,    0,  926,  931,  929,    0,  927,
      930,  930,  931,    0,  927,  930,  932,  929,  932,  927,
        0,  930,  931,  932,    0,  931,    0,    0,  932,  931,
        0,  930,    0,  931,  933,    0,  933,  930,  930,  931,
      933,  933,  930,  932,    0,  932,  933,    0,  930,  931,
      932,    0,  934,    0,  934,  932,    0,    0,  930,  934,
      934,  933,    0,  933,  934,  935,    0,  933,  933,    0,

        0,  936,    0,  933,    0,    0,  935,    0,  935,  934,
        0,  934,  936,  935,  936,    0,  934,  934,  935,  936,
        0,  934,  935,    0,  936,  937,    0,  937,  936,    0,
        0,    0,  937,  935,    0,  935,    0,  937,  938,  936,
      935,  936,  938,  940,    0,  935,  936,  940,  938,    0,
        0,  936,  937,  940,  937,  939,  939,  941,  938,  937,
      939,  941,    0,  940,  937,  938,  939,  941,    0,  938,
      940,    0,    0,    0,  940,  938,  939,  941,    0,  942,
      940,  942,  939,  939,  941,  938,  942,  939,  941,  943,
      940,  942,    0,  939,  941,    0,    0,    0,    0,    0,

      943,    0,  943,  939,  941,    0,  942,  943,  942,    0,
      944,    0,  943,  942,    0,    0,  943,    0,  942,    0,
        0,  944,    0,  944,  945,    0,  945,  943,  944,  943,
        0,  945,    0,  944,  943,    0,  945,  944,    0,  943,
      946,    0,  946,    0,    0,    0,    0,  946,  944,    0,
      944,  945,  946,  945,    0,  944,    0,    0,  945,    0,
      944, 1014, 1015,  945,    0, 1014, 1015,  946, 1016,  946,
     1016, 1014, 1015,    0,  946, 1016,    0,    0,    0,  946,
     1016, 1014, 1015,    0, 1017,    0, 1017,    0, 1014, 1015,
        0, 1017, 1014, 1015,    0, 1016, 1017, 1016, 1014, 1015,

        0,    0, 1016, 1018,    0, 1018,    0, 1016, 1014, 1015,
     1018, 1017,    0, 1017,    0, 1018, 1019,    0, 1017,    0,
     1019,    0,    0, 1017, 1020,    0, 1019,    0, 1020,    0,
     1018,    0, 1018, 1021, 1020, 1021, 1019, 1018,    0, 1020,
     1021,    0, 1018, 1019, 1020, 1021,    0, 1019,    0,    0,
        0, 1020, 1022, 1019, 1022, 1020,    0,    0,    0, 1022,
     1021, 1020, 1021, 1019, 1022,    0, 1020, 1021, 1023,    0,
     1023, 1020, 1021,    0,    0, 1023, 1024,    0, 1024, 1022,
     1023, 1022,    0, 1024,    0,    0, 1022,    0, 1024,    0,
        0, 1022, 1025, 1025, 1025, 1023,    0, 1023,    0, 1025,

        0,    0, 1023, 1024, 1025, 1024,    0, 1023,    0,    0,
     1024,    0,    0, 1026,    0, 1024, 1027,    0, 1027, 1025,
     1025, 1025, 1026, 1027, 1026, 1028, 1025, 1028, 1027, 1026,
        0, 1025, 1028, 1028, 1026,    0,    0, 1028,    0,    0,
     1026,    0,    0, 1027,    0, 1027, 1029,    0, 1029, 1026,
     1027, 1026, 1028, 1029, 1028, 1027, 1026, 1030, 1029, 1028,
     1028, 1026,    0,    0, 1028,    0,    0, 1030,    0, 1030,
     1031,    0, 1031, 1029, 1030, 1029,    0, 1031,    0, 1030,
     1029,    0, 1031,    0, 1030, 1029,    0,    0,    0, 1032,
        0,    0,    0,    0, 1030,    0, 1030, 1031, 1032, 1031,

     1032, 1030,    0,    0, 1031, 1032, 1030,    0,    0, 1031,
     1032, 1033, 1034, 1033, 1034,    0, 1032,    0, 1033, 1034,
        0,    0,    0, 1033, 1034, 1032,    0, 1032,    0,    0,
        0,    0, 1032,    0,    0,    0,    0, 1032, 1033, 1034,
     1033, 1034, 1035, 1036, 1035, 1033, 1034, 1036, 1037, 1035,
     1033, 1034, 1037, 1036, 1035, 1038,    0, 1038, 1037,    0,
        0,    0, 1038, 1036,    0,    0,    0, 1038, 1037, 1035,
     1036, 1035,    0,    0, 1036, 1037, 1035,    0,    0, 1037,
     1036, 1035, 1038,    0, 1038, 1037,    0,    0,    0, 1038,
     1036, 1039,    0, 1039, 1038, 1037,    0,    0, 1039, 1039,

     1040,    0, 1040, 1039, 1041,    0, 1041, 1040,    0,    0,
        0, 1041, 1040,    0,    0,    0, 1041,    0, 1039,    0,
     1039,    0,    0,    0,    0, 1039, 1039, 1040,    0, 1040,
     1039, 1041,    0, 1041, 1040, 1042,    0, 1042, 1041, 1040,
        0,    0, 1042, 1041, 1043,    0, 1043, 1042, 1044,    0,
     1044, 1043,    0,    0,    0, 1044, 1043,    0,    0,    0,
     1044,    0, 1042,    0, 1042,    0,    0,    0,    0, 1042,
        0, 1043,    0, 1043, 1042, 1044,    0, 1044, 1043, 1045,
     1046, 1045, 1044, 1043, 1046, 1045, 1045, 1044,    0,    0,
     1046, 1045,    0,    0, 1048, 1047,    0,    0, 1048, 1047,

     1046,    0,    0, 1047, 1048,    0, 1045, 1046, 1045, 1047,
        0, 1046, 1045, 1045, 1048,    0,    0, 1046, 1045, 1047,
        0, 1048, 1047,    0, 1049, 1048, 1047, 1046, 1049,    0,
     1047, 1048,    0, 1050, 1049, 1050, 1047,    0,    0,    0,
     1050, 1048,    0,    0, 1049, 1050, 1047, 1051,    0, 1051,
        0, 1049,    0,    0, 1051, 1049, 1052,    0, 1052, 1051,
     1050, 1049, 1050, 1052,    0,    0,    0, 1050, 1052,    0,
        0, 1049, 1050,    0, 1051, 1053, 1051, 1053, 1054,    0,
        0, 1051, 1053, 1052,    0, 1052, 1051, 1053,    0, 1054,
     1052, 1054,    0,    0,    0, 1052, 1054,    0,    0,    0,

        0, 1054, 1053,    0, 1053, 1054,    0,    0, 1055, 1053,
     1055,    0,    0,    0, 1053, 1055, 1054, 1056, 1054, 1056,
     1055,    0,    0, 1054, 1056, 1056,    0,    0, 1054, 1056,
     1057,    0,    0,    0, 1057, 1055,    0, 1055,    0, 1058,
     1057,    0, 1055, 1058, 1056,    0, 1056, 1055,    0, 1058,
     1057, 1056, 1056,    0, 1059,    0, 1056, 1057, 1059, 1058,
        0, 1057,    0,    0, 1059,    0, 1058, 1057,    0,    0,
     1058,    0,    0,    0, 1059,    0, 1058, 1057, 1060,    0,
     1060, 1059,    0,    0, 1060, 1059, 1058, 1061,    0, 1061,
     1060, 1059,    0, 1061,    0,    0, 1062,    0, 1062, 1061,

     1060, 1059,    0, 1062,    0, 1060,    0, 1060, 1062, 1061,
        0, 1060,    0,    0, 1061,    0, 1061, 1060,    0,    0,
     1061,    0, 1063, 1062, 1063, 1062, 1061, 1060,    0, 1063,
     1062, 1064,    0, 1064, 1063, 1062, 1061,    0, 1064,    0,
     1065,    0, 1065, 1064,    0,    0,    0, 1065,    0, 1063,
        0, 1063, 1065,    0,    0,    0, 1063,    0, 1064,    0,
     1064, 1063,    0,    0, 1066, 1064, 1066, 1065,    0, 1065,
     1064, 1066,    0, 1067, 1065, 1067, 1066,    0,    0, 1065,
     1067,    0, 1068,    0, 1068, 1067,    0,    0,    0, 1068,
        0, 1066,    0, 1066, 1068, 1069,    0,    0, 1066,    0,

     1067,    0, 1067, 1066,    0,    0, 1069, 1067, 1069, 1068,
        0, 1068, 1067, 1069, 1070, 1071, 1068,    0, 1069,    0,
        0, 1068, 1069,    0, 1071, 1070, 1071, 1070,    0,    0,
        0, 1071, 1070, 1069,    0, 1069, 1071, 1070,    0,    0,
     1069, 1070, 1071,    0,    0, 1069,    0,    0, 1072,    0,
     1072, 1071, 1070, 1071, 1070, 1072, 1072,    0, 1071, 1070,
     1072,    0,    0, 1071, 1070,    0, 1073, 1074, 1073, 1074,
        0,    0,    0, 1073, 1074, 1072,    0, 1072, 1073, 1074,
        0,    0, 1072, 1072,    0,    0,    0, 1072,    0,    0,
     1075,    0, 1075, 1073, 1074, 1073, 1074, 1075,    0,    0,

     1073, 1074, 1075,    0,    0, 1073, 1074,    0, 1076,    0,
     1076,    0,    0,    0,    0, 1076, 1077, 1075, 1077, 1075,
     1076,    0, 1077, 1077, 1075,    0,    0,    0, 1077, 1075,
        0,    0, 1078,    0, 1078, 1076,    0, 1076,    0, 1078,
        0,    0, 1076, 1077, 1078, 1077, 1118, 1076, 1118, 1077,
     1077,    0,    0, 1118,    0, 1077,    0,    0, 1118, 1078,
     1119, 1078, 1119,    0,    0,    0, 1078, 1119,    0,    0,
        0, 1078, 1119, 1118, 1120, 1118, 1120,    0,    0,    0,
     1118, 1120,    0,    0,    0, 1118, 1120, 1119, 1121, 1119,
     1121,    0, 1122,    0, 1119, 1121, 1122,    0,    0, 1119,

     1121, 1120, 1122, 1120,    0,    0, 1123,    0, 1120,    0,
     1123,    0, 1122, 1120, 1124, 1121, 1123, 1121, 1124, 1122,
        0,    0, 1121, 1122, 1124,    0, 1123, 1121, 1125, 1122,
        0,    0, 1125, 1123, 1124,    0, 1126, 1123, 1125, 1122,
     1126, 1124, 1127, 1123, 1126, 1124, 1127,    0, 1125,    0,
     1126, 1124, 1127, 1123, 1128, 1125,    0,    0, 1128, 1125,
     1126, 1124, 1127, 1126, 1128, 1125, 1129, 1126, 1130, 1127,
     1129, 1126, 1130, 1127, 1128, 1125, 1129, 1126, 1130, 1127,
     1131, 1128,    0, 1130, 1131, 1128, 1129, 1126, 1130, 1127,
     1131, 1128, 1132, 1129, 1133, 1130, 1132, 1129, 1133, 1130,

     1131, 1128, 1132, 1129, 1133, 1130,    0, 1131,    0,    0,
     1130, 1131, 1132, 1129, 1133, 1130, 1134, 1131,    0, 1132,
     1134, 1133, 1135, 1132, 1135, 1133, 1134, 1131, 1135, 1132,
     1136, 1133, 1136, 1137, 1135, 1137, 1134, 1136,    0, 1132,
     1137, 1133, 1136, 1134, 1135, 1137,    0, 1134,    0, 1135,
        0, 1135,    0, 1134,    0, 1135,    0, 1136,    0, 1136,
     1137, 1135, 1137, 1134, 1136,    0, 1138, 1137, 1138, 1136,
        0, 1135, 1137, 1138, 1139,    0, 1139,    0, 1138, 1140,
     1139, 1139,    0, 1140, 1141,    0, 1139,    0, 1141, 1140,
        0,    0, 1142, 1138, 1141, 1138, 1142,    0,    0, 1140,

     1138, 1139, 1142, 1139, 1141, 1138, 1140, 1139, 1139,    0,
     1140, 1141, 1142, 1139,    0, 1141, 1140,    0, 1143, 1142,
        0, 1141, 1143, 1142,    0,    0, 1140,    0, 1143, 1142,
     1144, 1141,    0, 1143, 1144,    0, 1144,    0, 1143, 1142,
     1144,    0, 1145,    0, 1146, 1143, 1145,    0, 1146, 1143,
     1144,    0, 1145,    0, 1146, 1143,    0, 1144,    0,    0,
     1143, 1144, 1145, 1144, 1146, 1143, 1148, 1144, 1147, 1145,
     1148, 1146, 1147, 1145,    0, 1146, 1148, 1144, 1147, 1145,
        0, 1146,    0, 1147,    0,    0, 1148,    0, 1147, 1145,
        0, 1146, 1150, 1148, 1149, 1147, 1150, 1148, 1149, 1147,

     1150,    0, 1150, 1148, 1149, 1147,    0, 1149,    0,    0,
     1147,    0, 1150, 1148, 1149, 1147, 1152,    0, 1151, 1150,
     1152, 1149, 1151, 1150,    0, 1149, 1152, 1150, 1151, 1150,
        0, 1149,    0, 1151, 1149,    0, 1152,    0, 1151, 1150,
        0, 1149, 1153, 1152, 1154, 1151, 1153, 1152, 1154, 1151,
        0,    0, 1153, 1152, 1154, 1151,    0, 1173,    0,    0,
     1151, 1173, 1153, 1152, 1154, 1151,    0, 1173,    0, 1153,
     1173, 1154, 1174, 1153,    0, 1154, 1174, 1173,    0, 1153,
        0, 1154, 1174,    0, 1173,    0, 1175,    0, 1173, 1153,
     1175, 1154, 1174,    0, 1173,    0, 1175, 1173, 1176, 1174,

        0, 1175, 1176, 1174, 1173,    0, 1175,    0, 1176, 1174,
     1177, 1178, 1179, 1175, 1177, 1178, 1179, 1175, 1176, 1174,
     1177, 1178, 1179, 1175,    0, 1176, 1178,    0, 1175, 1176,
     1177, 1178, 1179, 1175,    0, 1176, 1180, 1177, 1178, 1179,
     1180, 1177, 1178, 1179,    0, 1176, 1180, 1177, 1178, 1179,
     1182, 1181,    0, 1178, 1182, 1181, 1180, 1177, 1178, 1179,
     1182, 1181,    0, 1180, 1181, 1183,    0, 1180,    0, 1183,
     1182, 1181,    0, 1180,    0, 1183,    0, 1182, 1181,    0,
     1184, 1182, 1181, 1180, 1184, 1183,    0, 1182, 1181, 1185,
     1184, 1181, 1183, 1185,    0,    0, 1183, 1182, 1181, 1185,

     1184,    0, 1183,    0, 1186,    0,    0, 1184, 1186, 1185,
        0, 1184, 1183,    0, 1186, 1186, 1185, 1184, 1187, 1188,
     1185,    0, 1187, 1188, 1186,    0, 1185, 1184, 1187, 1188,
        0, 1186, 1198, 1198,    0, 1186, 1185,    0, 1187, 1188,
        0, 1186, 1186, 1199, 1200, 1187, 1188, 1199, 1200, 1187,
     1188, 1186,    0, 1199, 1200, 1187, 1188, 1198,    0,    0,
        0, 1198,    0, 1199, 1200, 1187, 1188, 1198,    0,    0,
     1199, 1200,    0,    0, 1199, 1200,    0, 1198,    0, 1204,
     1199, 1200,    0, 1204, 1198, 1201,    0, 1201, 1198, 1204,
     1199, 1200, 1201, 1202, 1198, 1202, 1203, 1201, 1203, 1204,

     1202,    0,    0, 1203, 1198, 1202, 1204,    0, 1203,    0,
     1204, 1212, 1201,    0, 1201, 1212, 1204,    0,    0, 1201,
     1202, 1212, 1202, 1203, 1201, 1203, 1204, 1202,    0, 1213,
     1203, 1212, 1202, 1213, 1214, 1203, 1214,    0, 1212, 1213,
        0, 1214, 1212, 1220,    0, 1220, 1214,    0, 1212, 1213,
     1220,    0,    0,    0,    0, 1220, 1213,    0, 1212,    0,
     1213, 1214,    0, 1214,    0,    0, 1213,    0, 1214,    0,
     1220,    0, 1220, 1214,    0,    0, 1213, 1220,    0,    0,
        0,    0, 1220, 1252, 1252, 1252, 1252, 1252, 1253,    0,
        0, 1253, 1253, 1255, 1255, 1255,    0, 1255, 1256,    0,

     1256, 1256, 1256, 1257,    0, 1257, 1257, 1257, 1258,    0,
     1258, 1258, 1258, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251,
     1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251, 1251
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex_lexer.l"
/**
 * lexer
 *
 *
 */
/***************************
 ** Section 1: Definitions
 ***************************/
#line 12 "flex_lexer.l"

#include "../sql/Expr.h"
#include "bison_parser.h"
#include <climits>
#include <stdio.h>
#include <sstream>

#define TOKEN(name) { return SQL_##name; }

static thread_local std::stringstream strbuf;

#line 2913 "flex_lexer.cpp"

/***************************
 ** Section 2: Rules
 ***************************/
/* Define the output files */
/* Make reentrant */
/* performance tweeks */
/* other flags */
/* %option nodefault */

/***************************
 ** Section 3: Rules
 ***************************/
#line 2927 "flex_lexer.cpp"

#define INITIAL 0
#define singlequotedstring 1
#define COMMENT 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 57 "flex_lexer.l"


#line 3214 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1252 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 1251 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 59 "flex_lexer.l"
BEGIN(COMMENT);
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 60 "flex_lexer.l"
/* skipping comment content until a end of line is read */;
	YY_BREAK
case 3:
/* rule 3 can match eol */
YY_RULE_SETUP
#line 61 "flex_lexer.l"
BEGIN(INITIAL);
	YY_BREAK
case 4:
/* rule 4 can match eol */
YY_RULE_SETUP
#line 63 "flex_lexer.l"
/* skip whitespace */;
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 65 "flex_lexer.l"
TOKEN(ADD)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 66 "flex_lexer.l"
TOKEN(AFTER)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 67 "flex_lexer.l"
TOKEN(ALL)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 68 "flex_lexer.l"
TOKEN(ALTER)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "flex_lexer.l"
TOKEN(ANALYZE)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 70 "flex_lexer.l"
TOKEN(AND)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 71 "flex_lexer.l"
TOKEN(ARRAY)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 72 "flex_lexer.l"
TOKEN(AS)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 73 "flex_lexer.l"
TOKEN(ASC)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 74 "flex_lexer.l"
TOKEN(BEFORE)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 75 "flex_lexer.l"
TOKEN(BEGIN)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 76 "flex_lexer.l"
TOKEN(BETWEEN)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 77 "flex_lexer.l"
TOKEN(BIGINT)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 78 "flex_lexer.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 79 "flex_lexer.l"
TOKEN(BY)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 80 "flex_lexer.l"
TOKEN(CALL)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 81 "flex_lexer.l"
TOKEN(CASCADE)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 82 "flex_lexer.l"
TOKEN(CASE)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 83 "flex_lexer.l"
TOKEN(CAST)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 84 "flex_lexer.l"
TOKEN(CHAR)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 85 "flex_lexer.l"
TOKEN(COLUMN)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 86 "flex_lexer.l"
TOKEN(COLUMNS)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 87 "flex_lexer.l"
TOKEN(COMMIT)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 88 "flex_lexer.l"
TOKEN(CONTROL)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 89 "flex_lexer.l"
TOKEN(COPY)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 90 "flex_lexer.l"
TOKEN(CREATE)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 91 "flex_lexer.l"
TOKEN(CROSS)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 92 "flex_lexer.l"
TOKEN(DATE)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 93 "flex_lexer.l"
TOKEN(DATETIME)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 94 "flex_lexer.l"
TOKEN(DAY)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 95 "flex_lexer.l"
TOKEN(DAYS)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 96 "flex_lexer.l"
TOKEN(DEALLOCATE)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 97 "flex_lexer.l"
TOKEN(DECIMAL)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 98 "flex_lexer.l"
TOKEN(DEFAULT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 99 "flex_lexer.l"
TOKEN(DELETE)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 100 "flex_lexer.l"
TOKEN(DELTA)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 101 "flex_lexer.l"
TOKEN(DESC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 102 "flex_lexer.l"
TOKEN(DESCRIBE)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 103 "flex_lexer.l"
TOKEN(DIRECT)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 104 "flex_lexer.l"
TOKEN(DISTINCT)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 105 "flex_lexer.l"
TOKEN(DOUBLE)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 106 "flex_lexer.l"
TOKEN(DROP)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 107 "flex_lexer.l"
TOKEN(ELSE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 108 "flex_lexer.l"
TOKEN(END)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 109 "flex_lexer.l"
TOKEN(ESCAPE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 110 "flex_lexer.l"
TOKEN(EXCEPT)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 111 "flex_lexer.l"
TOKEN(EXECUTE)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 112 "flex_lexer.l"
TOKEN(EXISTS)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 113 "flex_lexer.l"
TOKEN(EXPLAIN)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 114 "flex_lexer.l"
TOKEN(EXTRACT)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 115 "flex_lexer.l"
TOKEN(FALSE)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 116 "flex_lexer.l"
TOKEN(FILE)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 117 "flex_lexer.l"
TOKEN(FLOAT)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 118 "flex_lexer.l"
TOKEN(FOR)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 119 "flex_lexer.l"
TOKEN(FORMAT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 120 "flex_lexer.l"
TOKEN(FROM)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 121 "flex_lexer.l"
TOKEN(FULL)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 122 "flex_lexer.l"
TOKEN(GLOBAL)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 123 "flex_lexer.l"
TOKEN(GROUP)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 124 "flex_lexer.l"
TOKEN(HASH)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 125 "flex_lexer.l"
TOKEN(HAVING)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 126 "flex_lexer.l"
TOKEN(HINT)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 127 "flex_lexer.l"
TOKEN(HOUR)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 128 "flex_lexer.l"
TOKEN(HOURS)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 129 "flex_lexer.l"
TOKEN(IF)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 130 "flex_lexer.l"
TOKEN(ILIKE)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 131 "flex_lexer.l"
TOKEN(IMPORT)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 132 "flex_lexer.l"
TOKEN(IN)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 133 "flex_lexer.l"
TOKEN(INDEX)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 134 "flex_lexer.l"
TOKEN(INNER)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 135 "flex_lexer.l"
TOKEN(INSERT)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 136 "flex_lexer.l"
TOKEN(INT)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 137 "flex_lexer.l"
TOKEN(INTEGER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 138 "flex_lexer.l"
TOKEN(INTERSECT)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 139 "flex_lexer.l"
TOKEN(INTERVAL)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 140 "flex_lexer.l"
TOKEN(INTO)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 141 "flex_lexer.l"
TOKEN(IS)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 142 "flex_lexer.l"
TOKEN(ISNULL)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 143 "flex_lexer.l"
TOKEN(JOIN)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 144 "flex_lexer.l"
TOKEN(KEY)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 145 "flex_lexer.l"
TOKEN(LEFT)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 146 "flex_lexer.l"
TOKEN(LIKE)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 147 "flex_lexer.l"
TOKEN(LIMIT)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 148 "flex_lexer.l"
TOKEN(LOAD)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 149 "flex_lexer.l"
TOKEN(LOCAL)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 150 "flex_lexer.l"
TOKEN(LOCKED)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 151 "flex_lexer.l"
TOKEN(LONG)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 152 "flex_lexer.l"
TOKEN(MERGE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 153 "flex_lexer.l"
TOKEN(MINUS)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 154 "flex_lexer.l"
TOKEN(MINUTE)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 155 "flex_lexer.l"
TOKEN(MINUTES)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 156 "flex_lexer.l"
TOKEN(MONTH)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 157 "flex_lexer.l"
TOKEN(MONTHS)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 158 "flex_lexer.l"
TOKEN(NATURAL)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 159 "flex_lexer.l"
TOKEN(NO)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 160 "flex_lexer.l"
TOKEN(NOT)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 161 "flex_lexer.l"
TOKEN(NOWAIT)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 162 "flex_lexer.l"
TOKEN(NULL)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 163 "flex_lexer.l"
TOKEN(NVARCHAR)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 164 "flex_lexer.l"
TOKEN(OF)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 165 "flex_lexer.l"
TOKEN(OFF)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 166 "flex_lexer.l"
TOKEN(OFFSET)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 167 "flex_lexer.l"
TOKEN(ON)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 168 "flex_lexer.l"
TOKEN(OR)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 169 "flex_lexer.l"
TOKEN(ORDER)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 170 "flex_lexer.l"
TOKEN(OUTER)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 171 "flex_lexer.l"
TOKEN(PARAMETERS)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 172 "flex_lexer.l"
TOKEN(PLAN)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 173 "flex_lexer.l"
TOKEN(PREPARE)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 174 "flex_lexer.l"
TOKEN(PRIMARY)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 175 "flex_lexer.l"
TOKEN(REAL)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 176 "flex_lexer.l"
TOKEN(RENAME)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 177 "flex_lexer.l"
TOKEN(RESTRICT)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 178 "flex_lexer.l"
TOKEN(RIGHT)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 179 "flex_lexer.l"
TOKEN(ROLLBACK)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 180 "flex_lexer.l"
TOKEN(SCHEMA)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 181 "flex_lexer.l"
TOKEN(SCHEMAS)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 182 "flex_lexer.l"
TOKEN(SECOND)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 183 "flex_lexer.l"
TOKEN(SECONDS)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 184 "flex_lexer.l"
TOKEN(SELECT)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 185 "flex_lexer.l"
TOKEN(SET)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 186 "flex_lexer.l"
TOKEN(SHARE)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 187 "flex_lexer.l"
TOKEN(SHOW)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 188 "flex_lexer.l"
TOKEN(SKIP)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 189 "flex_lexer.l"
TOKEN(SMALLINT)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 190 "flex_lexer.l"
TOKEN(SORTED)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 191 "flex_lexer.l"
TOKEN(SPATIAL)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 192 "flex_lexer.l"
TOKEN(TABLE)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 193 "flex_lexer.l"
TOKEN(TABLES)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 194 "flex_lexer.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 195 "flex_lexer.l"
TOKEN(TEXT)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 196 "flex_lexer.l"
TOKEN(THEN)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 197 "flex_lexer.l"
TOKEN(TIME)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 198 "flex_lexer.l"
TOKEN(TIMESTAMP)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 199 "flex_lexer.l"
TOKEN(TO)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 200 "flex_lexer.l"
TOKEN(TOP)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 201 "flex_lexer.l"
TOKEN(TRANSACTION)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 202 "flex_lexer.l"
TOKEN(TRUE)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 203 "flex_lexer.l"
TOKEN(TRUNCATE)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 204 "flex_lexer.l"
TOKEN(UNION)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 205 "flex_lexer.l"
TOKEN(UNIQUE)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 206 "flex_lexer.l"
TOKEN(UNLOAD)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 207 "flex_lexer.l"
TOKEN(UPDATE)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 208 "flex_lexer.l"
TOKEN(USING)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 209 "flex_lexer.l"
TOKEN(VALUES)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 210 "flex_lexer.l"
TOKEN(VARCHAR)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 211 "flex_lexer.l"
TOKEN(VIEW)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 212 "flex_lexer.l"
TOKEN(VIRTUAL)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 213 "flex_lexer.l"
TOKEN(WHEN)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 214 "flex_lexer.l"
TOKEN(WHERE)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 215 "flex_lexer.l"
TOKEN(WITH)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 216 "flex_lexer.l"
TOKEN(YEAR)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 217 "flex_lexer.l"
TOKEN(YEARS)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 219 "flex_lexer.l"
TOKEN(HELP)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 220 "flex_lexer.l"
TOKEN(SYNC)
	YY_BREAK
case 160:
/* rule 160 can match eol */
YY_RULE_SETUP
#line 222 "flex_lexer.l"
TOKEN(CHARACTER_VARYING)
	YY_BREAK
/* Allow =/== see https://sqlite.org/lang_expr.html#collateop */
case 161:
YY_RULE_SETUP
#line 225 "flex_lexer.l"
TOKEN(EQUALS)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 226 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 227 "flex_lexer.l"
TOKEN(NOTEQUALS)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 228 "flex_lexer.l"
TOKEN(LESSEQ)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 229 "flex_lexer.l"
TOKEN(GREATEREQ)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 230 "flex_lexer.l"
TOKEN(CONCAT)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 232 "flex_lexer.l"
{ return yytext[0]; }
	YY_BREAK
case 168:
#line 235 "flex_lexer.l"
case 169:
YY_RULE_SETUP
#line 235 "flex_lexer.l"
{
  yylval->fval = atof(yytext);
  return SQL_FLOATVAL;
}
	YY_BREAK
/*
   * Regularly, negative literals are treated as <unary minus> <positive literal>. This does not work for LLONG_MIN, as it has no
   * positive equivalent. We thus match for LLONG_MIN specifically. This is not an issue for floats, where
   *   numeric_limits<double>::lowest() == -numeric_limits<double>::max();
   */
case 170:
YY_RULE_SETUP
#line 245 "flex_lexer.l"
{
  yylval->ival = LLONG_MIN;
  return SQL_INTVAL;
}
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 250 "flex_lexer.l"
{
  errno = 0;
  yylval->ival = strtoll(yytext, nullptr, 0);
  if (errno) {
    return fprintf(stderr, "[SQL-Lexer-Error] Integer cannot be parsed - is it out of range?");
    return 0;
  }
  return SQL_INTVAL;
}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 260 "flex_lexer.l"
{
  // Crop the leading and trailing quote char
  yylval->sval = hsql::substr(yytext, 1, strlen(yytext)-1);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 266 "flex_lexer.l"
{
  yylval->sval = strdup(yytext);
  return SQL_IDENTIFIER;
}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 271 "flex_lexer.l"
{ BEGIN singlequotedstring; strbuf.clear(); strbuf.str(""); }  // Clear strbuf manually, see #170
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 272 "flex_lexer.l"
{ strbuf << '\''; }
	YY_BREAK
case 176:
/* rule 176 can match eol */
YY_RULE_SETUP
#line 273 "flex_lexer.l"
{ strbuf << yytext; }
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 274 "flex_lexer.l"
{ BEGIN 0; yylval->sval = strdup(strbuf.str().c_str()); return SQL_STRING; }
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 275 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unterminated string\n"); return 0; }
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 277 "flex_lexer.l"
{ fprintf(stderr, "[SQL-Lexer-Error] Unknown Character: %c\n", yytext[0]); return 0; }
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 279 "flex_lexer.l"
ECHO;
	YY_BREAK
#line 4194 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1252 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1252 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 1251);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 279 "flex_lexer.l"

/***************************
 ** Section 3: User code
 ***************************/

int yyerror(const char *msg) {
    fprintf(stderr, "[SQL-Lexer-Error] %s\n",msg); return 0;
}

